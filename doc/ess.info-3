This is ess.info, produced by makeinfo version 4.0 from ess.texi.

START-INFO-DIR-ENTRY
* ESS: (ess). Emacs Speaks Statistics (S/S+/R, SAS, BUGS, Stata, XLisp-Stat).
END-INFO-DIR-ENTRY

ESS -- Emacs Speaks Statistics
******************************

   Currently maintained by A.J. (Tony) Rossini, Richard M. Heiberger,
Kurt Hornik, Martin Maechler, and Rodney A. Sparapani.

   This file documents `ESS', a GNU Emacs package for running
`S(plus)', `R', `XLisp-Stat', `SAS' and potentially any other
interactive `statistical' languages in an `inferior' buffer, editing
source code in these languages and interacting with the running program.

   This documentation relates to Version

   Original Info Author: David M. Smith (<D.M.Smith@lancaster.ac.uk>),
Department of Mathematics and Statistics, Lancaster University, UK.

   Current Info Author: A.J. Rossini
(<rossini@biostat.washington.edu>), Department of Biostatistics,
University of Washington, Seattle, WA 98185, USA


File: ess.info,  Node: ESS[SAS]--Function keys for batch processing,  Next: ESS[SAS]--TAB key,  Prev: ESS[SAS]--Batch processes,  Up: Help for SAS

ESS[SAS]-Function keys for batch processing
===========================================

   The description of the setup for function keys for batch processing
of SAS files is unavoidably more complex than we wish it were.  The
actual use of the function keys is simple.  There are five distinct
options:

   1. (default) Function keys in ESS[SAS] modes do whatever they
normally do in other emacs modes.  Many users will have defined some of
the keys [f2]-[f12] in their .emacs or _emacs file, or will have
installation-wide definitions in their site-start.el file.  By default,
ESS does not override those definitions.  This default is intended to
make ESS[SAS] mode behave similarly to other emacs modes.

   2,3,4,5.  Users who are primarily familiar with SAS, and who are
learning emacs as a way to approach SAS, will likely want to duplicate
the function key capabilities that SAS Institute provides with its
Display Manager.  There are still options.  SAS provides different
function key definitions with its PC and Unix products; ESS can use
either.  The ESS[SAS] function key definitions can be active in all
buffers (global) or limited (local) only to buffers that have
SAS-related file extensions: .sas, .log, .lst, filetype-1 (which
defaults to .txt), and filetype-2 which defaults to .dat.  The
distinction between local and global appears subtle.  If you want the
ESS[SAS] definitions to work when you are in *shell* or when editing
files other than the file extensions that SAS recognizes, you will most
likely want to use the global definitions.  If you want your function
keys to understand SAS batch commands when you are editing SAS files,
and to behave normally when editing other files, then you will choose
the local definitions.

   The option can be chosen by the person installing ESS for a site or
by an individual.

   The site manager can uncomment only one of the following lines.
ESS[SAS] Function keys are available in ESS[SAS] and related modes if
you uncomment either of the following lines in your ess-site.el:
     ;;2; (setq ess-sas-local-unix-keys t)
     ;;3; (setq ess-sas-local-pc-keys t)
   ESS[SAS] Function keys are available in all emacs modes if you
uncomment either of the following lines in your ess-site.el:
     ;;4; (setq ess-sas-global-unix-keys t)
     ;;5; (setq ess-sas-global-pc-keys t)
   The names -unix- and -pc- have nothing to do with the operating
system that you are running.  Rather they mimic the definitions that
the SAS Display Manager uses by default on those platforms.

   The option can be selected by an individual by adding a line to the
.emacs (or _emacs) file, immediately following the
      (load "ess-site")
   line.  If your site manager has chosen an option 2,3,4,5 you don't
want, you must turn it off before selecting a different option.  To
turn off an option, add the appropriate line (uncommented) to your
.emacs (_emacs) file.
     ;;2; (setq ess-sas-local-unix-keys nil)
     ;;3; (setq ess-sas-local-pc-keys nil)
     ;;4; (setq ess-sas-global-unix-keys nil)
     ;;5; (setq ess-sas-global-pc-keys nil)

   Finally, we get to what the function keys actually do.  You may
recognize some of the Short Names as SAS Display Manager commands (they
are in all capitals).

     Unix PC     Short Name  Long Description
     
     F2   F2     refresh     revert the current buffer with the file of the
                             same name if the file is newer than the buffer.
     
     F3   F8     SUBMIT      save the current .sas file (which is either the
                             .sas file in the current buffer or the .sas
                             file associated with the .lst or .log file in the
                             current buffer) and submit the file as a batch
                             SAS job.
     
     F4   F5     PROGRAM     switch buffer to .sas file.
     
     F5   F6     LOG         switch buffer to .log file, `refresh' and goto
                             next error message, if any.
     
     F6   F7     OUTPUT      switch buffer to .lst file and `refresh'.
     
     F7   F4     filetype-1  switch buffer to filetype-1 (defaults to .txt)
                             file and `refresh'.
     
     F8   F3     shell       switch buffer to shell.
     
     F9   F9     VIEWTABLE   open an interactive FSEDIT/FSBROWSE session
                             on the SAS dataset near point
     
     F10  F10    toggle-log  toggle ESS[SAS] for .log files; may be useful
                             for certain debugging situations
     
     F11  F11    filetype-2  switch buffer to filetype-2 (defaults to .dat)
                             file and refresh.
     
     F12  F12    viewgraph   open a GSASFILE near point for viewing either
                             in emacs or with an external viewer

   Besides the keys that mimic SAS Display Manager commands, five other
keys have been provided for convenience.  `shell' switches you to the
*shell* buffer where you can type operating system commands.  This is
especially helpful if you would like to kill a SAS batch job.  F2
performs the `refresh' operation on the current buffer.  `refresh'
compares the buffer date/time stamp with the file date/time stamp and
replaces the buffer with the file if the file is newer.  This is the
same operation that is automatically performed when LOG, OUTPUT,
`filetype-1' or `filetype-2' are pressed.  `filetype-1' switches you to
a file with the same file root as your .sas file, but with a different
extension; .txt by default.  `filetype-2' is similar, except it is .dat
by default.  You can over-ride the default, by specifying a different
extension in your .emacs file.  For example, for `filetype-1':
     (setq ess-sas-suffix-1 "txt")

   F10 toggles ESS[SAS] mode for .log files which is off by default
(technically, it is SAS-log-mode, but it looks the same).  The syntax
highlighting can be helpful in certain debugging situations, but large
.log files will take a long time to render.  F12 will open a GSASFILE
near point for viewing either with emacs or with an external viewer.
Depending on your version of emacs and the operating system you are
using, emacs may support .gif and .jpg files internally.  You may need
to change the following two variables for your own situation:
     (setq ess-sas-graph-suffix-regexp "[.]\\(e?ps\\|gif\\|jpe?g\\|tiff?\\)")
     (setq ess-sas-image-viewer "kodakimg") ;; external viewer


File: ess.info,  Node: ESS[SAS]--TAB key,  Next: ESS[SAS]--Usage scenarios,  Prev: ESS[SAS]--Function keys for batch processing,  Up: Help for SAS

ESS[SAS]-TAB key
================

   Again, two options.

   The TAB key is bound by default to sas-indent-line.  This function is
used to syntactically indent SAS code so PROC and RUN are in the left
margin, other statements are indented 4 spaces from the margin,
continuation lines are indented 4 spaces in from the beginning column
of that statement.  This is the type of functionality that emacs
provides in most programming language modes.  This functionality is
equivalent to uncommenting the following line in ess-site.el:
     ;;; (setq ess-sas-edit-keys-toggle 0)

   ESS provides an alternate behavior for the TAB key that makes it
behave as it does on non-emacs terminals, i.e. move the cursor to the
next tab stop.  The alternate behavior also provides a backwards TAB
key: C-TAB.  This functionality is obtained by uncommenting the
following line in ess-site.el:
     ;;; (setq ess-sas-edit-keys-toggle 1)
   Under the alternate behavior, the TAB key is bound to tab-to-tab-stop
and the tab stops are set by default at multiples of 4.


File: ess.info,  Node: ESS[SAS]--Usage scenarios,  Next: ESS[SAS]--Common problems,  Prev: ESS[SAS]--TAB key,  Up: Help for SAS

ESS[SAS]-Usage scenarios
========================

   We present one scenario for using ESS to interact with SAS.
Contributions of examples of how you work with ESS are appreciated
(especially since it helps us determine priorities on future
enhancements)! (comments as to what should be happening are prefixed by
"##").

   Batch SAS (-unix-keys illustrated, pc-keys in the comments)
         ## Find the file you want to work with
         C-x C-f myfile.sas
         ## myfile.sas will be in ESS[SAS] mode
     
         ## Edit as appropriate, then save and submit the batch SAS job.
         ## -pc- F8
         F3
     
         ## The job runs in the shell buffer while you continue to edit
         ## myfile.sas.  If you are running a Unix shell under Unix or
         ## Windows, the message buffer will notify you with a shell
         ## notification when the job is complete.  If so, then you
         ## will also have the option of terminating the batch job
         ## before it is finished.
         ## -pc- F3
         F8
     
         ## In any case, you may want to visit the .log while the process
         ## is still running (unix only) or when it is done and check for
         ## error messages
         ## (you will be taken to the next error message, if any).
         ## The .log will be refreshed and you will be placed in it's buffer.
         ## -pc- F6
         F5
     
         ## Now, refresh the .lst and go to it's buffer.
         ## -pc- F7
         F6
     
         ## If you wish to make changes, go to the .sas file with
         ## -pc- F5
         F4
         ## make your editing changes and then submit again.

   Interactive SAS
         ## Find the file you want to work with
         C-x C-f myfile.sas
         ## myfile.sas will be in ESS[SAS] mode
     
         ## Edit as appropriate, and then start up SAS with the cursor in
         ## the myfile.sas buffer
         M-x SAS
     
         ## Four buffers will appear on screen:
         ## myfile.sas  in  ESS[SAS]        mode # your source file
         ## *SAS:1*     in  iESS [SAS:1]    mode # ESS communication buffer
         ## *SAS:1.log* in  Shell [] ESStr  mode # SAS log information
         ## *SAS:1.lst* in  Shell [] ESSlst mode # SAS listing information
     
         ## If you would prefer each of the four buffers to appear in its
         ## own individual frame, you can arrange for that.  Place the
         ## cursor in the buffer displaying myfile.sas.  Enter the
         ## sequence:
         C-c C-w
     
         ## The cursor will normally be in buffer myfile.sas.
         ## If not, put it there:
         C-x b myfile.sas
     
         ## Send regions, lines, or the entire file contents to SAS
         ## (regions are most useful).  A highlighted region will normally
         ## begin with the keywords 'DATA' or 'PROC' and end with the
         ## keyword 'RUN;'
         C-c C-r
     
         ## Information appears in the log buffer, analysis results in the
         ## listing buffer.  In case of errors, make the corrections in the
         ## myfile.sas buffer and resubmit with another C-c C-r
     
         ## PROC GPLOT graphs will normally be produced in a postscript
         ## file and be viewed later.  Include the lines
         /* required gsoptions for batch files */
         /* comment out these lines for interactive use on X-terminals*/
         filename grafout 'temp.ps';
         goptions device=ps gsfname=grafout gsfmode=append gaccess=sasgastd;
         ## in myfile.sas.
     
         ## PROC PLOT graphs can be viewed in the listing buffer.  You may
         ## wish to control the vertical spacing to allow the entire plot
         ## to be visible on screen, for example, by
         proc plot; plot a*b / vpos=25;
     
         ## At the end of the session you may save the log and listing
         ## buffers with the usual C-x C-s commands.  You will be prompted
         ## for a file name.  Typically, the names myfile.log and mfile.lst
         ## will be used.  You will almost certainly want to edit the saved
         ## files before including them in a report.  The files are
         ## read-only by default.  You can make them writable by the emacs
         ## command C-x C-q.
     
         ## At the end of the session, the input file myfile.sas will
         ## typically have been revised.  You can save it.  It can be used
         ## later as the beginning of another iESS[SAS] session.  It can
         ## also be used as a batch input file to SAS.
     
         ## The *SAS:1* buffer is strictly for ESS use.  The user should
         ## never need to read it or write to it.  Refer to the .lst and
         ## .log buffers for monitoring output!

   Here is a typical myfile.sas:
         title 'Analysis of Case 0502';
     
         data case0502;
             infile '/home/public/stat/Data/case0502.asc'
                    firstobs=2;
             input percent code;
         run;
     
         proc glm;
           class code;
           model percent=code /ss1;
         run;


File: ess.info,  Node: ESS[SAS]--Common problems,  Prev: ESS[SAS]--Usage scenarios,  Up: Help for SAS

ESS[SAS]-Common problems
========================

     1. If M-x SAS gives weird errors upon startup, check the following:
        - you are running Windows:  SAS does not support stdio on Windows
        - ess-sas-sh-command (in the ESS source directory) needs to be
          executable (solution: "chmod ugo+rx ess-sas-sh-command").
        - sas isn't in your executable path (verify using "which sas" from
          a shell command-line)
        - you need a copy of SAS (we can't solve this)
     
     2. M-x SAS starts up SAS in the window system (motif, for example),
        instead of starting it up in the emacs buffers.
     
        Probably the unix command "sas" on your system calls a local
        script which in turn calls the sas executable.  The fix is to
        call the sas executable directly.
     
        Change the line in ess-sas-sh command from:
                sas </dev/tty 1>$stdout 2>$stderr $
        to a call to the complete path name of the sas executable on
        your system, for example:
                /usr/local/sas612/sas </dev/tty 1>$stdout 2>$stderr $
        To find the complete path name on your system, you can
        execute the line (from the unix prompt):
                find / -name 'sas' -exec ls -ld {} \;
        and expect a response similar to the following
          -rwxr-xr-x   1 sas  sas  2441216 Sep  9  1997 /usr/local/sas612/sas


File: ess.info,  Node: Help OS,  Next: Installation,  Prev: Help for Statistical Packages,  Up: Top

Help, arranged by Operating System
**********************************

* Menu:

* Help Unix::
* Help Microsoft::


File: ess.info,  Node: Help Unix,  Next: Help Microsoft,  Prev: Help OS,  Up: Help OS

Help for Unix
=============


File: ess.info,  Node: Help Microsoft,  Prev: Help Unix,  Up: Help OS

Help for Microsoft
==================

* Menu:

* Installation::                Installing ESS on your system


File: ess.info,  Node: Installation,  Next: Customization,  Prev: Help OS,  Up: Top

Installing ESS on your system
*****************************

   The following section details those steps necessary to get ESS
running on your system.

* Menu:

* Unix installation::
* Microsoft Windows installation::
* System dependent::            Other variables you may need to change

   We now discuss installation, which might happen under Unix or
Microsoft Windows.  First, we discuss Unix installation.  *Note Unix
installation::.

   For Microsoft Windows Installation please skip to the *Note
Microsoft Windows installation::.


File: ess.info,  Node: Unix installation,  Next: Microsoft Windows installation,  Up: Top

Unix installation
=================

  1.   cd to a directory where you keep emacs lisp files, or create a
     new   directory to hold the distribution.  This directory will be
     referred   to below as "the ESS distribution directory".  It will
     contain,   at the end, the tar file `ess-.tar.gz', and a directory
     for   the ESS source, which will be termed "the ESS-

     Note that the .elc files may be installed elsewhere (as specified
     in the   Makefile) if desired.

  2.   Retrieve the gzipped tar file or zipped file from
     <http://software.biostat.washington.edu/statsoft/ess/essDL>

  3.   Copy `ess-.tar.gz' to the location where you want the   ESS-
     distribution, which will unpack into a subdirectory, ess-.
          	gunzip ess-.tar.gz
          	tar vxf ess-.tar

          	(or: `gunzip < ess-.tar.gz | tar vxf -' ).
          	(or using GNU tar:  `tar zvxf ess-.tar.gz').

     The `tar' command will extract files into the current directory.
     Do not create ess-   depth to your directory structure.

     Note if you have a very ancient version of GNU emacs (_and_  really
      can not upgrade to Emacs 20 or higher!) you can unpack the
     `lisp/19.29.tar.gz' file, read the ensuing `lisp/19.29/README'
     and you may succeed...

  4.   Edit the file `lisp/ess-site.el' as explained in the comments
     section of that file.  Installations that are using ESS only for
     S-Plus   6.x will probably not need to make any changes.
     Installations that also   have one or more of (S+5 S4 S+4 S+3 R
     SAS XLispStat Stata)   may need to uncomment corresponding lines
     in `ess-site.el'.

  5.   READ THIS ITEM THOROUGHLY BEFORE STARTING:

     In the ess-   want to place the executables in other locations;
     see LISPDIR and   INFODIR) and then type:
          	make

     If this works, then you might try:
          	make install
       Note that the latter does the former as well, so if you are
     feeling   lucky, you might want to skip it.

     This will install the info files (and the lisp files, if they are
     to go   in another directory).  Don't forget to edit the file
     `dir' in the   info directory specified by `INFODIR' in
     `doc/Makefile'.  See   the sample `dir' file for an example of the
     line to add.

     If you are using XEmacs, you might do:
          	make EMACS=xemacs

     and then
          	make EMACS=xemacs install
       instead of editing the Makefile.

     _Note_ that you might need to use GNU make for everything to
     work properly

     An alternative, if you are running XEmacs and have access to the
     XEmacs system directories, would be to place the directory in the
     site-lisp directory, and simply type `make' (and copy the
     documentation as appropriate).

     For Emacs, you would still have to move the files into the top
     level   site-lisp directory.

  6.   Add the line
            (load "/PATH/ess-site")
       to your .emacs file (or default.el or site-init.el, for a
     site-wide   installation).  Replace `/PATH' above with the value of
      ess-lisp-directory as defined in ess-site.el.

     Alternatively, if ess-site.el is in your current Lisp path, you can
      do:
          	(require 'ess-site)
       to configure Emacs for ESS.

  7.   (OPTIONAL) If you are running S-PLUS or R, you might consider
     installing the database files.  From within (X)Emacs, `C-x d' to
     the   directory containing ESS.  Now:
                 M-x S+6
       (or `M-x S+5': get running.  once you have reached the SPLUS
     prompt, do:)
                 M-x ess-create-object-name-db
       (this will create the file `ess-s+6-namedb.el'; if it isn't in
     the    ESS directory, move it there).

     Then, completions will be autoloaded and will not be regenerated
     for   every session.

     For R, do the same, using
                M-x R
       and then `M-x ess-create-object-name-db' creating
     `ess-r-namedb.el'; if it isn't in the ESS directory, move it
     there).

  8.   For more information on using ESS in your daily work, see the
     files   README.S, README.SAS, and README.XLispStat.

     For the impatient, the quick version of usage follows:

  9.   To edit statistical programs, load the files with the requiste
     extensions  (".sas" for SAS, ".S" for S-PLUS, ".R" for R, and
     ".lsp"   for XLispStat).

 10.   To run statistical processes under (X)Emacs:

     Run S-PLUS 6.x with:
          	M-x S+6
       (or M-x S  using backwards compatibility).  You will then be
     asked   for a pathname ("S starting data directory?"), from which
     to start   the process.  Similarly for S-PLUS 5.x.

     If you wish to run R, you can start it with:
          	M-x R

     XLispStat can be run with
          	M-x XLS

     An interactive SAS can be run in an `iESS[SAS]' buffer with:
          	M-x SAS
     This works when SAS is running on a Unix machine, either the local
     machine or over a network connection.  M-x SAS does not work when
     SAS is running on a Windows machine.

 11.   That's it!


File: ess.info,  Node: Microsoft Windows installation,  Prev: Unix installation,  Up: Top

Microsoft Windows installation
==============================

   For Microsoft Windows installation, please follow the next steps:
(see separate instructions above for UNIX *Note Unix installation::.

  1.     cd to a directory where you keep emacs lisp files, or create a
     new    directory (for example, `c:\emacs\') to hold the
     distribution.  This    directory will be referred to below as "the
     ESS distribution    directory".  It will contain, at the end,
     either the tar file    `ess-.tar.gz' or the zip file `ess-.zip',
     and a    directory    for the ESS source, which will be termed
     "the ESS-    directory".

  2.       Retrieve the compressed tar file `ess-.tar.gz' or the
     zipped file `ess-.zip' from one of the FTP or WWW      archive
     sites      via FTP (or HTTP).  Be aware that http browsers on
     Windows      frequently change the "." and "-" characters in
     filenames to other      punctuation.  Please change the names back
     to their original form.

  3.       Copy `ess-.tar.gz' to the location where you want the
     ess-      `c:\emacs\ess-.tar.gz', and cd there.  For example,

                       cd c:\emacs

     Extract the files from the distribution, which will unpack
     into a subdirectory, `ess-'.
                    	gunzip ess-.tar.gz
                    	tar vxf ess-.tar
          	(or: `gunzip < ess-.tar.gz | tar vxf -' ).
     (or: from the zip file: `unzip ess-.zip')

     The `tar' command will extract files into the current directory.

     Do not create `ess-' yourself, or you will get an extra level
     of   depth to your directory structure.

  4.      Windows users will usually be able to use the
     `lisp/ess-site.el'      as distributed.  Only rarely will changes
     be needed.

  5.       Windows users will need to make sure that the directories
     for the      software they will be using is in the PATH
     environment variable.  On      Windows 9x, add lines similar to
     the following to your      `c:\autoexec.bat'      file:
                   path=%PATH%;c:\progra~1\spls2000\cmd
          On Windows NT/2000, add the directories to the PATH using the
         MyComputer menu.  Note that the directory containing the
     program is      added to the PATH, not the program itself.  One
     such line is needed      for each software program.  Be sure to
     use the abbreviation      `progra~1' and not the long version with
     embedded blanks.  Use      backslashes "\".

  6.       Add the line
                      (load "/PATH/ess-site")
          to your .emacs (or _emacs) file (or default.el or
     site-init.el, for      a site-wide installation).  Replace `/PATH'
     above with the      value of ess-lisp-directory as defined in
     `ess-site.el'.  Use      forwardslashes `/'.

  7.       (OPTIONAL) If you are running Sqpe or R, you might consider
        installing the database files.  From within (X)Emacs, `C-x d'
     to      the   directory containing ESS.  Now:
                           M-x Sqpe+6
            (get running.  once you have reached the SPLUS prompt, do:)
                           M-x ess-create-object-name-db
            (this will create the file `ess-s+6-namedb.el'; if it isn't
     in the        ESS directory, move it there).

     Then, completions will be autoloaded and will not be regenerated
       for every session.

     For R, do the same, using
                          M-x R
          and then `M-x ess-create-object-name-db' creating
     `ess-r-namedb.el'; if it isn't in the ESS directory, move it
     there).

  8.       For more information on using ESS in your daily work, see the
         files doc/README.SPLUS4WIN, doc/README.S, doc/README.SAS, and
         doc/README.XLispStat.

     For the impatient, the quick version of usage follows:

  9.       To edit statistical programs, load the files with the
     requisite      extensions  (".sas" for SAS, ".S" or "s" or "q" or
     "Q" for S-PLUS,      ".r" or ".R" for R, and ".lsp"   for
     XLispStat).

 10.       To run statistical processes under (X)Emacs:

     Run S-PLUS 6.x or 2000 with:
                    	M-x S+6
            (or `M-x S').  You will then be      asked for a pathname
     ("S starting data directory?"), from which to      start the
     process.  The prompt will propose your current directory      as
     the default.  Similarly for S-PLUS 6.x.  Send lines or regions
     from the emacs buffer containing your S program (for example,
     `myfile.s') to the S-Plus Commands Window with the      `C-c C-n'
     or `C-c C-r' keys.

     Run S-PLUS 6.x or 2000 inside an emacs buffer
                    	M-x Sqpe+6
          You will then be asked for a pathname ("S starting data
     directory?"), from which to start the process.  The prompt will
      propose your current directory as the default.  Similarly for
     S-PLUS      6.x.  Send lines or regions from the emacs buffer
     containing your S      program (for example, `myfile.s') to the
     *S+6* buffer with the      `C-c C-n' or `C-c C-r' keys.  You do
     not have access to      interactive graphics in      this mode.
     You get Unix-like behavior, in particular the entire
     transcript is available for emacs-style search commands.

     If you wish to run R, you can start it with:
                    	M-x R

     XLispStat can not currently be run with
                    	M-x XLS
          Hopefully, this will change.  However, you can still edit with
         Emacs, and cut and paste the results into the XLispStat
     *Listener* Window under Microsoft Windows.

     SAS for Windows uses the batch access with function keys that is
       described in `doc/README.SAS'.  The user can also edit SAS files
         in an `ESS[SAS]' buffer and than manually copy and paste them
     into      an Editor window in the SAS Display Manager.

     For Windows, inferior SAS in an `iESS[SAS]' buffer does not work
       on the local machine.  It does work over a network connection to
         SAS running on a remote Unix computer.

     Reason:  we use ddeclient to interface with programs and SAS
     doesn't      provide the corresponding ddeserver capability.

 11. That's it!



File: ess.info,  Node: System dependent,  Prev: Installation,  Up: Installation

Other variables you may need to change
======================================

   If you run the S program (from the shell) with a command other than
`Splus' you will need to set the variable `inferior-ess-program' to the
name of the appropriate program by including a line such as
     (setq inferior-ess-program "S+")

in your `.emacs' file

(substituting `S+' for the name of your S program.)

   If you need to call this program with any arguments, the variable you
need to set is dependent on the value of `inferior-ess-program'; for
example if it is `"Splus"', set the variable `inferior-Splus-args' to a
string of arguments to the `Splus' program.  If `inferior-ess-program'
has some other value, substitute the `Splus' part of
`inferior-Splus-args' with the appropriate program name.  There aren't
many instances where you need to call S with arguments, however: in
particular do not call the S program with the `-e' command-line editor
argument since ESS provides this feature for you.

   If you are running Splus (the enhanced version of S from Statsci) you
may also need to set the variable `S-plus' to `t'.  If your value of
`inferior-ess-program' is `"S+"' or `Splus' this will not be necessary,
however; `S-plus' defaults to `t' in this case.

   Finally, if you use a non-standard prompt within S, you will need to
set the variable `inferior-ess-prompt' to a regular expression which
will match both the primary prompt (`"> "' by default) and the
continuing prompt (default of `"+ "'.) The default value of this
variable matches S's default prompts.  For example, if you use (`"$ "')
as your primary prompt (you have `options(prompt="$ ")' in your
`.First' function), add the following line to your `.emacs':
     (setq inferior-ess-prompt "^\\(\\+\\|[^\\$]*\\$\\) *")

You will also need to set the variable `inferior-ess-primary-prompt' to
a regular expression which matches the primary prompt only.  Do not
anchor the regexp to the beginning of the line with `^'.  Once again,
the default value matches S's default prompt; in the example above the
appropriate value would be `"[^\\$]*\\$ *"'.

   Once these variables are set appropriately, ESS should work on any
system.


File: ess.info,  Node: Customization,  Next: Key Index,  Prev: Installation,  Up: Top

Customizing ESS
***************

   ESS can be easily customized to your taste simply by including the
appropriate lines in your `.emacs' file.  There are numerous variables
which affect the behavior of ESS in certain situations which can be
modified to your liking.  Keybindings may be set or changed to your
preferences, and for per-buffer customizations hooks are also available.

* Menu:

* Variables::                   Variables for customization
* Hooks::                       Customizing ESS with hooks
* Keybindings::                 Changing the default ESS keybindings


File: ess.info,  Node: Variables,  Next: Hooks,  Prev: Customization,  Up: Customization

Variables for customization
===========================

   ESS is easily customizable by means of setting variables in your
`.emacs' file.  In most cases, you can change defaults by including
lines of the form
     (setq VARIABLE-NAME VALUE)

in your `.emacs'.

   In what follows, variable names will be listed along with their
descriptions and default values.  Just substitute the variable name and
the new value into the template above.

* Menu:

* Variables for starting ESS::  Variables for starting ESS
* Dump file variables::         Variables for dump files
* Indentation variables::       Variables controlling indentation
* Variables controlling interaction::  Variables controlling interaction
					with the ESS process


File: ess.info,  Node: Variables for starting ESS,  Next: Dump file variables,  Prev: Variables,  Up: Variables

Variables for starting ESS
--------------------------

 - User Option: ess-ask-for-ess-directory
     Default: `t'
     If this variable has a non-`nil' value, then every time ESS is run
     with `M-x S' you will be prompted for a directory to use as the
     working directory for your S session; this directory should have a
     `.Data' subdirectory.  If the value of `ess-ask-for-ess-directory'
     is `nil', the value of `S-directory' is used as the working
     directory.

 - User Option: S-directory
     Default: Your home directory
     The working directory for your S session if
     `ess-ask-for-ess-directory' is `nil', and the default when
     prompting for a directory if it is not.  For example, you may wish
     to set this to the value of the current buffer's working directory
     before starting S by adding the following line to your `.emacs'
     file (*note Hooks::)
          (setq ess-pre-run-hook
             '((lambda () (setq S-directory default-directory))))

 - User Option: ess-ask-about-display
     Default: `nil'
     If this variable has a non-`nil' value, then every time ESS is run
     with `M-x S' you will be asked for a value for the `DISPLAY'
     environment variable to be used in the current S session.  If this
     variable is not set correctly, S will not be able to create any
     windows under the X windowing environment.  Completion is provided
     over the `X-displays-list' variable; the default is the current
     value of `DISPLAY'.  This feature is useful is you often run S on
     a different display than that of the machine you are running S
     from.  If `ess-ask-about-display' is `nil', the current value of
     `DISPLAY' is used.

 - User Option: X-displays-list
     Default: `'(":0.0")'
     List of possible values for the `DISPLAY' environment variable,
     provided for completion when prompting for such a value.


File: ess.info,  Node: Dump file variables,  Next: Indentation variables,  Prev: Variables for starting ESS,  Up: Variables

Variables for dump files
------------------------

 - User Option: ess-insert-function-templates
     Default: `t'
     If this variable has a non-`nil' value, then dumping a
     non-existent object will result in the edit buffer containing a
     skeleton function definition, ready for editing.

 - User Option: ess-source-directory
     Default: `"/tmp/"'
     Directory name (ending in `/') in which dump files are placed.
     This should always be a writable directory.

 - User Option: ess-source-directory-generator
     Default: `nil'
     Alternative, dynamic method of specifying the directory for dump
     files.

 - User Option: ess-dump-filename-template
     Default: USER_NAME`.'OBJECT_NAME`.S'
     Naming system to use for dumped object files.  *Note Source
     Directories::, for details of this and the previous two variables.

 - User Option: ess-keep-dump-files
     Default: `nil'
     Boolean flag signifying whether to keep dump files or to delete
     them after each use.  *Note Source Files::, for more details.


File: ess.info,  Node: Indentation variables,  Next: Variables controlling interaction,  Prev: Dump file variables,  Up: Variables

Variables controlling indentation
---------------------------------

 - User Option: ess-tab-always-indent
     Default: `t'
     If non-`nil', then `TAB' in the edit buffer always indents the
     current line, regardless of the position of point in the line.
     Otherwise, indentation is only performed if point is in the lines
     indentation, and a tab character is inserted is point is after the
     first nonblank character.

 - User Option: ess-auto-newline
     Default: `nil'
     Non-`nil' means automatically newline before and after braces
     inserted in S code.

   The following variables control amounts of indentation.  These
variables automatically become buffer-local in any ESS buffer, and so
setting any of these variables has effect in the current buffer only.

 - User Option: ess-indent-level
     Default: 2
     Extra indentation of S statement sub-block with respect to
     enclosing braces.

 - User Option: ess-brace-imaginary-offset
     Default: 0
     Extra indentation (over sub-block indentation) for block following
     an open brace which follows on the same line as a statement.

 - User Option: ess-brace-offset
     Default: 0
     Extra indentation for braces, compared with other text in same
     context.

 - User Option: ess-continued-statement-offset
     Default: 0
     Extra indent for lines not starting new statements.

 - User Option: ess-continued-brace-offset
     Default: 0
     Extra indent for substatements that start with open-braces.  This
     is in addition to `ess-continued-statement-offset'.

 - User Option: ess-arg-function-offset
     Default: 2
     Extra indent for arguments of function `foo' when it is called as
     the value of an argument to another function in `arg=foo(...)'
     form.  If not number, the statements are indented at
     open-parenthesis following `foo'.

 - User Option: ess-expression-offset
     Default: 4
     Extra indent for internal substatements of the call to
     `expression()' specified in
          `obj <- expression(...)'

     form.  If not a number, the statements are indented at
     open-parenthesis following `expression'.

 - User Option: ess-else-offset
     Default: 2
     Extra indentation of the `else' clause with respect to the
     corresponding `if'.

In addition, a number of default styles are defined for you (in
`ess-style-alist'):

 - User Option: ess-default-style
     Default: `DEFAULT'
     The default formatting style to use in edit buffers.  The DEFAULT
     style uses the values of the above indentation variables at
     load-time, so that changing these variables in your `.emacs' file
     will affect your buffer defaults.  Other styles are: `GNU', `BSD',
     `K&R', `CLB', and `C++'.  See `ess-cust.el' for the complete
     definitions of the styles.  *Note Edit buffer::, for more details.


File: ess.info,  Node: Variables controlling interaction,  Prev: Indentation variables,  Up: Variables

Variables controlling interaction with the ESS process
------------------------------------------------------

 - User Option: comint-input-ring-size
     Default: 50
     Number of commands to store in the command history.

 - User Option: ess-execute-in-process-buffer
     Default: `nil'
     If this is `nil', then the `ess-execute-' commands (*note Other::)
     output to a temporary buffer.  Otherwise, the output goes to the
     ESS process.

 - User Option: ess-eval-visibly-p
     Default: `nil'
     If non-`nil', then the `ess-eval-' commands (*note Edit buffer::)
     echo the S commands in the process buffer by default.  In any
     case, passing a prefix argument to the eval command reverses the
     meaning of this variable.


File: ess.info,  Node: Hooks,  Next: Keybindings,  Prev: Variables,  Up: Customization

Customizing ESS with hooks
==========================

   ESS provides the following hooks:

 - Hook: ess-mode-hook
     Called every time `ESS' is run.

 - Hook: ess-mode-load-hook
     Called just after the file `ess.el' is loaded.  Useful for setting
     up your keybindings, etc.

 - Hook: ess-pre-run-hook
     Called before the ESS process is started (e.g., with `M-x S').
     Good for setting up your directory.

 - Hook: ess-post-run-hook
     Called just after the ESS process starts up.  This can be used to
     evaluate ESS code at the start of a session, with
     `ess-eval-visibly', say.

 - Hook: inferior-ess-mode-hook
     For customizing inferior ess mode.  Called after inferior-ess-mode
     is entered and variables have been initialized.

 - Hook: ess-help-mode-hook
     Called every time when entering ess-help-mode (i.e., an ESS help
     buffer is generated).

 - Hook: ess-send-input-hook
     Called just before line input is sent to the process.

 - Hook: ess-transcript-mode-hook
     For customizing ESS transcript mode.


File: ess.info,  Node: Keybindings,  Prev: Hooks,  Up: Customization

Changing the default ESS keybindings
====================================

   ESS provides a separate keymaps (keymap variables) for ESS process
buffers, edit buffers and for help buffers.  The key bindings in the
edit buffers further depend on the language and dialect in use.

 - Keymap: inferior-ess-mode-map
     Keymap used in the ESS process buffer.  The bindings from
     `comint-mode-map' are automatically inherited.

 - Keymap: ess-mode-map
     Keymap used within edit (ess-mode) buffers.

 - Keymap: ess-eval-map
     Keymap used within edit buffers for sending ESS code to the running
     process.

 - Keymap: ess-help-mode-map
     Keymap used within help buffers.  In addition, `ess-help-sec-map'
     is the keymap for the `s' prefix key.  Keys defined in
     `ess-help-sec-keys-alist' are automatically inserted into this
     keymap when ESS is loaded.

 - Keymap: ess-transcript-mode-map
     Keymap used within ESS transcript buffers.


File: ess.info,  Node: Key Index,  Next: Command Index,  Prev: Customization,  Up: Top

Key (Character) Index
*********************

* Menu:

File: ess.info,  Node: Command Index,  Next: Concept Index,  Prev: Key Index,  Up: Top

Command and Function Index
**************************

* Menu:

* comint-backward-matching-input:        Process buffer motion.
* comint-forward-matching-input:         Process buffer motion.


File: ess.info,  Node: Concept Index,  Next: Variable and command index,  Prev: Command Index,  Up: Top

Concept Index
*************

* Menu:

* .Data directory:                       Variables for starting ESS.
* .emacs file <1>:                       Variables for starting ESS.
* .emacs file <2>:                       System dependent.
* .emacs file <3>:                       Indenting.
* .emacs file <4>:                       Source Directories.
* .emacs file:                           Variables.
* .First function:                       System dependent.
* aborting S commands:                   Other.
* aborting the ESS process:              Other.
* arguments to S program <1>:            System dependent.
* arguments to S program:                Customizing startup.
* authors:                               Credits.
* autosaving:                            Source Files.
* Bug reports:                           Reporting Bugs.
* bugs:                                  Bugs.
* cleaning up:                           Hot keys.
* comint:                                Credits.
* command history:                       Command History.
* command to run S program:              System dependent.
* command-line completion:               Completion.
* command-line editing:                  Command-line editing.
* commands:                              Entering commands.
* comments:                              Source Files.
* comments in S:                         Indenting.
* completion in edit buffer:             Other edit buffer commands.
* completion of object names:            Completion.
* completion on file names:              Completion.
* completion on lists:                   Completion.
* completion, when prompted for object names: Edit buffer.
* continuing prompt:                     System dependent.
* creating new objects:                  Edit buffer.
* credits:                               Credits.
* customization:                         Customization.
* data frames:                           Completion.
* debugging S functions:                 Evaluating code.
* defaults:                              Variables.
* deleting output:                       Last command.
* directories <1>:                       Variables for starting ESS.
* directories:                           Starting Up.
* DISPLAY environment variable:          Variables for starting ESS.
* dump file directories:                 Source Directories.
* dump file names:                       Source Directories.
* dump files <1>:                        Source Files.
* dump files <2>:                        Edit buffer.
* dump files:                            Dump file variables.
* echoing commands when evaluating:      Evaluating code.
* edit buffer:                           Edit buffer.
* editing commands:                      Command History.
* editing functions:                     Editing.
* editing transcripts:                   Saving transcripts.
* entering commands:                     Entering commands.
* environment variables:                 Variables for starting ESS.
* errors:                                Error Checking.
* ESS process buffer:                    Starting Up.
* ESS process directory:                 Starting Up.
* evaluating code with echoed commands:  Evaluating code.
* evaluating S expressions:              Evaluating code.
* Font-lock mode:                        Highlighting.
* formatting source code <1>:            Indenting.
* formatting source code:                Indentation variables.
* graphics:                              Graphics.
* help files:                            Help.
* highlighting:                          Highlighting.
* historic backups:                      Source Files.
* hooks:                                 Hooks.
* hot keys:                              Hot keys.
* indentation:                           Indentation variables.
* indenting:                             Indenting.
* installation:                          Installation.
* interactive use of S:                  Introduction.
* interrupting S commands:               Other.
* introduction:                          Introduction.
* keyboard short cuts:                   Hot keys.
* killing temporary buffers:             Hot keys.
* killing the ESS process:               Hot keys.
* lists, completion on:                  Completion.
* motion in transcript mode:             Transcript Mode.
* multi-line commands, resubmitting:     Transcript resubmit.
* Multiple ESS processes:                Multiple ESS processes.
* name of S program:                     System dependent.
* new objects, creating:                 Edit buffer.
* objects:                               Hot keys.
* pages in the process buffer:           Transcript.
* paging commands in help buffers:       Help.
* paragraphs in the process buffer:      Transcript.
* parsing errors:                        Error Checking.
* primary prompt:                        System dependent.
* process buffer:                        Starting Up.
* process names:                         Multiple ESS processes.
* programming in S:                      Introduction.
* project work in S:                     Source Files.
* prompts in S:                          System dependent.
* quitting from ESS:                     Hot keys.
* re-executing commands:                 Command History.
* reading long command outputs:          Last command.
* reverting function definitions:        Edit buffer.
* running S:                             Starting Up.
* S program name:                        System dependent.
* search list <1>:                       Hot keys.
* search list:                           Source Directories.
* sending input:                         Entering commands.
* Splus:                                 System dependent.
* starting directory <1>:                Variables for starting ESS.
* starting directory:                    Starting Up.
* starting ESS:                          Starting Up.
* stepping through code:                 Evaluating code.
* STERM:                                 Is the Statistical Process running under ESS?.
* tcsh:                                  Completion.
* temporary buffers:                     Help.
* temporary buffers, killing:            Hot keys.
* transcript:                            Transcript.
* transcript file:                       Customizing startup.
* transcript file names:                 Saving transcripts.
* transcript mode motion:                Transcript Mode.
* transcripts of S sessions:             Introduction.
* using S interactively:                 Introduction.
* variables:                             Variables.
* working directory <1>:                 Starting Up.
* working directory:                     Source Directories.
* X windows <1>:                         X11.
* X windows:                             Variables for starting ESS.

