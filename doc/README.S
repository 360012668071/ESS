-*- indented-text -*-

($Revision: 1.7 $)

ESS: Using The S family of statistical languages
================================================

ESS (originally S-mode) was initially designed for use with S(tm) and
S-PLUS(tm); hence, this family of statistical languages currently has
the most support.  We denote by _S_, any of the currently available
members of the family, including S 3.x, S 4.x, S-PLUS 3.x, S-PLUS 4.x,
S-PLUS 5.x, and R.  In addition, we denote by _Emacs_, one of the GNU
family of editors, either Emacs (as developed and maintained by the
Free Software Foundation) or XEmacs (which is a derivative work).

The following is covered in this document:
- non ESS general Emacs features.
- Editing files.
- running an S process as an inferior process to Emacs
- using transcripts.
- Scenarios for use (possibilities, based on actual usage)
- Philosophies

We assume that you are familiar with Emacs terminology and syntax:
file, buffer, region, description of keys etc.  If not, please read
the New Users guide (found in the info pages, "C-h i" (by pressing
control h, i) or Tutorial, "C-h t").

To find the key-sequences for commands, please the view the keymap for
how to activate/use the features (C-h b).

ESS[S]: Editing Files
=====================

ESS[S] is the mode for editing S language files.  This mode handles:

- proper indenting, generated by both [Tab] and [Return].
- color and font choices based on syntax.
- ability to send the contents of a single buffer, regions, lines, and 
  functions to an inferior process, if one is currently running.
- ability to switch between processes which would be the target of the 
  buffer (for the above).
- The ability to request help from a process for variables and
  functions, and to have the results sent into a separate buffer.
- completion of object names and file names.

ESS[S] mode should be automatically turned on when loading a file with
the suffices found in ess-site (*.R, *.S, *.s, etc).  However, one
will have to start up an inferior process to take advantage of the
interactive features.


iESS: Inferior ESS processes.
=============================

iESS (inferior ESS) is the mode for interfacing with active
statistical processes (programs).  This mode handles:

- proper indenting, generated by both [Tab] and [Return].
- color and font highlighting based on syntax.
- ability to send the contents of a single buffer, regions, lines, and 
  functions to an inferior process, if one is currently running.
- The ability to request help from a process for variables and
  functions, and to have the results sent into a separate buffer.
- completion of object names and file names.
- interactive history mechanism
- transcript recording and editing

To start up this mode, use:
   M-x S+3 
   M-x S4
   M-x R

(for S-PLUS 3.x, S4, and R, respectively.  This assumes that you have
access to each).


ESS-trans: Handling and Reusing Transcripts
===========================================

- resubmit lines to an active process buffer
- edit transcript
- color and font highlighting based on syntax.



ESS-help: assistance with viewing help
======================================

- move between help sections
- send examples to S for evaluation


Philosophies for using ESS
==========================

The first is preferred, and configured for.  The second one can be
retrieved again, by changing variables.

1: (preferred by the current group of developers):  The source code is 
   real.  The objects are realizations of the source code.  Source
   for EVERY user modified object is placed in a particular directory
   or directories, for later editing and retrieval.

2: (older version): S objects are real.  Source code is a temporary
   realization of the objects.  Dumped buffers should not be saved.

The second saves disk space.  The first allows for better portability
of code.


Scenarios for use
=================

We present some basic suggestions for using ESS to interact with S.
These are just a subset of approaches, many better approaches are
possible.  Contributions of examples of how you work with ESS are
appreciated (especially since it helps us determine priorities on
future enhancements)! (comments as to what should be happening are
prefixed by "##").

1:  ## Load the file you want to work with
    C-c C-f file.S
    ## Edit as appropriate, and then start up S-PLUS 3.x
    M-x S+3
    ## Go back to the file editing buffer
    C-x b file.S
    ## send regions, lines, or the entire file contents to S-PLUS (the 
    ## last one is demonstrated below)
    C-c C-b

2:  ## Start up S-PLUS 3.x, in a process buffer (this will be *S+3:1*) 
    M-x S+3
    ## Dump into a buffer to work with
    C-c C-d 971103work
    ## enter program, functions, and code into work buffer, and send
    ## entire contents to S-PLUS when ready
    C-c C-b
    ## Go to *S+3:1* buffer, which is the process buffer, and examine
    ## the results.
    C-c y
    ## the above is a shortcut for:  C-x b *S+3:1*
    ## Return to the work buffer (may/may not be prefixed)
    C-x C-b rossini.971103work.S
    ## Fix the function that didn't work, and resubmit by placing the
    ## cursor somewhere in the function and
    C-c C-f
    ## Or you could've selected a region (using the mouse, or keyboard 
    ## via setting point/mark) and 
    C-c C-r
    ## Or you could step through, line by line, using 
    C-c C-n
    ## Or just send a single line (without moving to the next) using
    C-c [RETURN]
    ## where [RETURN] is the return key.
    ## To fix that error in syntax for the "rchisq" command, get help
    ## by
    C-c C-v rchisq

3:  ## Start up S-PLUS 3.x, in a process buffer (this will be *S+3:1*) 
    M-x S+3
    ## Work in the process buffer.  When you find an object that needs 
    ## to be changed (This could be a data frame, or a variable, or a 
    ## function), dump it to a buffer.
    C-c C-d my.cool.function
    ## Edit the function as appropriate, and dump back in to the
    ## process buffer  
    C-c C-b
    ## Return to the S-PLUS process buffer
    C-c y
    ## Continue editing.
    ## When you need help, use 
    C-c C-v rchisq
    ## instead of entering:   help("rchisq")
