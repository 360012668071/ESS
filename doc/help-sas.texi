@ESS{[SAS]}{} was designed for use with @SAS{}.  It is descended from emacs 
macros developed by John Sall for editing @SAS{} programs and @code{SAS-mode} by 
Tom Cook.  Those editing features and new advanced features are part of 
@ESS{[SAS]}{}.  The user interface of @ESS{[SAS]}{} has similarities with @ESS{[S]}
and the @SAS{} Display Manager.

@comment  node-name,  next,  previous,  up
@node ESS(SAS)--Design philosophy, ESS(SAS)--Editing files
@section ESS(SAS)--Design philosophy

@ESS{[SAS]}{} was designed to aid the user in writing and maintaining
@SAS{} programs, such as @file{@var{foo}.sas}.  Both interactive and batch submission
of @SAS{} programs is supported.   

@ESS{[SAS]}{} was written with two primary goals.

1. The emacs text editor provides a powerful and flexible development
environment for programming languages.  These features are a boon to all
programmers and, with the help of @ESS{[SAS]}{}, to @SAS{} users as well.

2. Although a departure from @SAS{} Display Manager, @ESS{[SAS]}{} provides
similar key definitions to give novice @ESS{[SAS]}{} users a head start.
Also, inconvenient @SAS{} Display Manager features, like remote submission
and syntax highlighting, are provided transparently; appealing to
advanced @ESS{[SAS]}{} users.

@comment  node-name,  next,  previous,  up
@node ESS(SAS)--Editing files, ESS(SAS)--TAB key, ESS(SAS)--Design philosophy
@section ESS(SAS)--Editing files

@ESS{[SAS]}{} is the mode for editing @SAS{} language files.  This mode handles:

@display
- proper indenting, generated by both @key{TAB} and @key{RET}.
- color and font choices based on syntax.
- ability to send the contents of an entire buffer, a highlighted region,
  or a single line to an interactive @w{@SAS{} process.}
- ability to switch between processes which would be the target of the
  buffer (for the above).
- ability to save and submit the file you are working on as a batch 
  @w{@SAS{} process} with a single keypress and to continue editing while it is runs
  in the background.
- capability of killing the batch @w{@SAS{} process} through the shell buffer or
  allow the @w{@SAS{} process} to keep on running after you exit emacs.
- single keypress navigation of @file{.sas}, @file{.log} and @file{.lst} files 
  (@file{.log} and @file{.lst} files are refreshed with each keypress).
@end display

@ESS{[SAS]}{} is automatically turned on when editing a file with a @file{.sas} 
suffix (or other extension, if specified via auto-mode-alist).  The function
keys can be enabled to use the same function keys that
the @SAS{} Display Manager does.  The interactive capabilities of @ESS{} require you 
to start an inferior @SAS{} process with @kbd{M-x SAS}
(@xref{IESS(SAS)--Interactive SAS processes}.)

At this writing, the indenting and syntax highlighting are generally
correct.  Known issues: for multiple line @code{*} or @code{%*} comments, only the
first line is highlighted; for @file{.log} files, only the first line of a
@code{NOTE:}, @code{WARNING:} or @code{ERROR:} message is highlighted; unmatched
single/double quotes in @code{CARDS} data lines are @strong{NOT} ignored; in an
iterative @code{DO} statement, @code{TO} and @code{BY} are not highlighted.

@comment  node-name,  next,  previous,  up
@node  ESS(SAS)--TAB key, ESS(SAS)--Batch SAS processes, ESS(SAS)--Editing files
@section ESS(SAS)--@key{TAB} key

Two options.  The @key{TAB} key is bound by default to sas-indent-line.  This
function is used to syntactically indent @SAS{} code so @code{PROC} and @code{RUN} are in
the left margin, other statements are indented 4 spaces from the margin,
continuation lines are indented 4 spaces in from the beginning column of
that statement.  This is the type of functionality that emacs provides
in most programming language modes.  This functionality is equivalent to
uncommenting the following line in @file{ess-site.el}:
@example
(setq ess-sas-edit-keys-toggle nil)
@end example

@ESS{} provides an alternate behavior for @key{TAB} that makes it behave
as it does in @SAS{} Display Manager, i.e. move the cursor to the next stop.  
The alternate behavior also provides a "TAB" backwards, @kbd{C-@key{TAB}}, that
moves the cursor to the stop to the left and deletes any characters
between them.  This functionality is obtained by uncommenting the
following line in @file{ess-site.el}:
@example
(setq ess-sas-edit-keys-toggle t)
@end example
Under the alternate behavior, @key{TAB} is bound to @kbd{M-x tab-to-tab-stop}
and the stops are set at multiples of @code{sas-indent-width}.

@comment  node-name,  next,  previous,  up
@node  ESS(SAS)--Batch SAS processes, ESS(SAS)--Function keys for batch processing, ESS(SAS)--TAB key
@section ESS(SAS)--Batch @SAS{} processes

Submission of a @SAS{} batch job is dependent on your environment.
@code{ess-sas-submit-method} is determined by your operating system and your
shell.  It defaults to @code{'sh} unless you are running Windows or Mac
Classic.  Under Windows, it will default to @code{'sh} if you are using a
@UNIX{}-imitating shell; otherwise @code{'ms-dos} for an @acronym{MS-DOS} shell.  On Mac OS
X, it will default to @code{'sh}, but under Mac Classic AppleScript is used
(@code{'apple-script}).  You will also set this to @code{'sh} if the @SAS{} batch job
needs to run on a remote machine rather than your local machine.  This
works transparently if you are editing the remote file via ange-ftp/EFS
or tramp.  Note that @code{ess-sas-shell-buffer-remote-init} is a Local
Variable that defaults to "ssh" which will be used to open the buffer on
the remote host and it is assumed that no password is necessary,
i.e. you are using the equivalent of ssh-agent/ssh-add (see the
discussion about Local Variables below if you need to change the
default).

However, if you are editing the file locally and transferring it back
and forth with Kermit, you need some additional steps.  First, start
Kermit locally before remotely logging in.  Open a local copy of the
file with the @code{ess-kermit-prefix} character prepended (the default is
"#").  Execute the command @kbd{M-x ess-kermit-get} which automatically brings the
contents of the remote file into your local copy.  If you transfer files
with Kermit manually in a shell buffer, then note that the Kermit escape
sequence is @kbd{C-q C-\ c} rather than @kbd{C-\ c} which it would be in an ordinary
terminal application, i.e. not in an emacs buffer.  Lastly, note that
the remote Kermit command is specified by @code{ess-kermit-command}.

The command used by the @code{SUBMIT} function key (@key{F3} or @key{F8}) to submit a batch
@SAS{} job, whether local or remote, is @code{ess-sas-submit-command} which
defaults to @code{sas-program}.  @code{sas-program} is @code{"invoke SAS using program file"}
for Mac Classic and @code{"sas"} otherwise.  However, you may have to alter
@code{ess-sas-submit-command} for a particular program, so it is defined as
buffer-local.  Conveniently, it can be set at the end of the program:
@example
endsas;
Local variables:
ess-sas-submit-command: "sas8"
End:
@end example

The command line is also made of @code{ess-sas-submit-pre-command}, 
@code{ess-sas-submit-post-command} and @code{ess-sas-submit-command-options} 
(the last of which is also buffer-local).
Here are some examples for your @initfile{}
file (you may also use @kbd{M-x customize-variable}):
@example
;'sh default
(setq ess-sas-submit-pre-command "nohup")                 
;'sh default
(setq ess-sas-submit-post-command "-rsasuser &")          
;'sh example
(setq-default ess-sas-submit-command "/usr/local/sas/sas")        
;'ms-dos default
(setq ess-sas-submit-pre-command "start")                 
;'ms-dos default
(setq ess-sas-submit-post-command "-rsasuser -icon")      
;Windows example
(setq-default ess-sas-submit-command "c:/progra~1/sas/sas.exe")   
;Windows example
(setq-default ess-sas-submit-command "c:\\progra~1\\sas\\sas.exe")
@end example

There is a built-in delay before a batch @SAS{} job is submitted when using
a @UNIX{}-imitating shell under Windows.  This is necessary in many cases
since the shell might not be ready to receive a command.  This delay is
currently set high enough so as not to be a problem.  But, there may be
cases when it needs to be set higher, or could be set much lower to
speed things up.  You can over-ride the default in your @initfile{} file by:
@example
(setq ess-sleep-for 0.2)
@end example

For example, open the file you want to work with 
(@code{(setq ess-sas-global-unix-keys t)} keys shown, 
@code{(setq ess-sas-global-pc-keys t)} in parentheses; 
@ESS{[SAS]}{} function keys are presented in the next section).
@example
@kbd{C-x C-f foo.sas}
@end example
@file{@var{foo}.sas} will be in @ESS{[SAS]}{} mode.  Edit as appropriate, then save and 
submit the batch @SAS{} job.
@example
@key{F3} (@key{F8})
@end example
The job runs in the shell buffer while you continue to edit 
@file{@var{foo}.sas}.  If @code{ess-sas-submit-method} is @code{'sh}, then the 
message buffer will display the shell notification when the 
job is complete.  The @code{'sh} setting also allows you to 
terminate the @SAS{} batch job before it is finished.
@example
@key{F8} (@key{F3})
@end example
Terminating a @SAS{} batch in the @file{*shell*} buffer.
@example
kill %1
@end example
You may want to visit the @file{.log} (whether the job is still running 
or it is finished) and check for error messages.  The @file{.log} will be
refreshed and you will be placed in it's buffer.  You will be 
taken to the 1st error message, if any.  
@example
@key{F5} (@key{F6})
@end example
Goto the next error message, if any.
@example
@key{F5} (@key{F6})
@end example
Now, refresh the @file{.lst} and go to it's buffer.
@example
@key{F6} (@key{F7})
@end example
If you wish to make changes, go to the @file{.sas} file with.
@example
@key{F4} (@key{F5})
@end example
Make your editing changes and submit again.
@example
@key{F3} (@key{F8})
@end example

@comment  node-name,  next,  previous,  up
@node  ESS(SAS)--Function keys for batch processing, IESS(SAS)--Interactive SAS processes, ESS(SAS)--Batch SAS processes
@section ESS(SAS)--Function keys for batch processing

The setup of function keys for @SAS{} batch processing
is unavoidably complex, but the usage of function keys is simple.  
There are five distinct options:

Option 1 (default).  Function keys in @ESS{[SAS]}{} are not bound to elisp
commands.  This is in accordance with the GNU Elisp Coding Standards
(@acronym{GECS}) which do not allow function keys to be bound so that they are
available to the user.

Options 2-5.  Since @acronym{GECS} does not allow function keys to be bound by
modes, these keys are often unused.  So, @ESS{[SAS]}{} provides users with
the option of binding elisp commands to these keys.  Users who are
familiar with @SAS{} will, most likely, want to duplicate the function key
capabilities of the @SAS{} Display Manager.  There are four options (noted
in parentheses).

@enumerate a
@item
@SAS{} Display Manager has different function key definitions for
@UNIX{} (2, 4) and Windows (3, 5); @ESS{[SAS]}{} can use either.
@item
The @ESS{[SAS]}{} function key definitions can be active in all buffers
(global: 4, 5) or limited (local: 2, 3) only to buffers with files that
are associated with @ESS{[SAS]}{} as specified in your auto-mode-alist.
@end enumerate

The distinction between local and global is subtle.  If you want the
@ESS{[SAS]}{} definitions to work when you are in the @file{*shell*} buffer or when
editing files other than the file extensions that @ESS{[SAS]}{} recognizes,
you will most likely want to use the global definitions.  If you want
your function keys to understand @SAS{} batch commands when you are editing
@SAS{} files, and to behave normally when editing other files, then you
will choose the local definitions.  The option can be chosen by the
person installing @ESS{} for a site or by an individual.

@enumerate a
@item
For a site installation or an individual, uncomment @strong{ONLY ONE} of the
following lines in your @file{ess-site.el}.  @ESS{[SAS]}{} Function keys are
available in @ESS{[SAS]}{} if you uncomment either 2 or 3 and in all modes if
you uncomment 4 or 5:
@example
;;2; (setq ess-sas-local-unix-keys t)
;;3; (setq ess-sas-local-pc-keys t)
;;4; (setq ess-sas-global-unix-keys t)
;;5; (setq ess-sas-global-pc-keys t)
@end example

The names @code{-unix-} and @code{-pc-} have nothing to do with the operating system
that you are running.  Rather, they mimic the definitions that the @SAS{}
Display Manager uses by default on those platforms.

@item
If your site installation has configured the keys contrary to your 
liking, then you must call the appropriate function.  
@example 
 (load "ess-site") ;; local-unix-keys
 (ess-sas-global-pc-keys)
@end example
@end enumerate

Finally, we get to what the function keys actually do.  You may recognize
some of the nicknames as @SAS{} Display Manager commands (they are in all 
capitals).

@display
@UNIX{} @PC{}  Nickname   "inferior" Alias (if any) and Description  

@key{F2}   @key{F2}  refresh
                    revert the current buffer with the file of the same 
                    name if the file is newer than the buffer

@key{F3}   @key{F8}  @code{SUBMIT}     @kbd{C-c C-b}
                    save the current @file{.sas} file (which is either the @file{.sas} 
                    file in the current buffer or the @file{.sas} file associated
                    with the @file{.lst} or @file{.log} file in the current buffer) 
                    and submit the file as a batch @SAS{} job

@key{F4}   @key{F5}  @code{PROGRAM}       
                    switch buffer to @file{.sas} file

@key{F5}   @key{F6}  @code{LOG}        @kbd{C-c C-x}
                    switch buffer to @file{.log} file, `refresh' and goto next 
                    error message, if any

@key{F6}   @key{F7}  @code{OUTPUT}     @kbd{C-c C-y}
                    switch buffer to @file{.lst} file and `refresh'

@key{F7}   @key{F4}  filetype-1    
                    switch buffer to filetype-1 (defaults to @file{.txt}) file 
                    and `refresh'

@key{F8}   @key{F3}  shell      
                    switch buffer to shell

@key{F9}   @key{F9}  @code{VIEWTABLE}  
                    open an interactive @code{PROC FSEDIT} session on the @SAS{} 
                    dataset near point

@key{F10}  @key{F10}  toggle-log    
                    toggle @ESS{[SAS]}{} for @file{.log} files; useful for 
                    certain debugging situations

@key{F11}  @key{F11}  filetype-2
                    switch buffer to filetype-2 (defaults to @file{.dat}) file 
                    and `refresh'

@key{F12}  @key{F12}  viewgraph
                    open a @code{GSASFILE} near point for viewing either in emacs
                    or with an external viewer

@kbd{C-@key{F1}} @kbd{C-@key{F1}} rtf-portrait
                    create an @MS{} @RTF{} portrait file from the current buffer 
                    with a file extension of @file{.rtf}

@kbd{C-@key{F2}} @kbd{C-@key{F2}} rtf-landscape
                    create an @MS{} @RTF{} landscape file from the current buffer 
                    with a file extension of @file{.rtf}

@kbd{C-@key{F3}} @kbd{C-@key{F8}} submit-region @kbd{C-c C-r} 
                    write region to @file{ess-temp.sas} and submit

@kbd{C-@key{F5}} @kbd{C-@key{F6}} append-to-log    
                    append @file{ess-temp.log} to the current @file{.log} file

@kbd{C-@key{F6}} @kbd{C-@key{F7}} append-to-output 
                    append @file{ess-temp.lst} to the current @file{.lst} file

@kbd{C-@key{F9}} @kbd{C-@key{F9}} @code{INSIGHT} 
                    open an interactive @code{PROC INSIGHT} session on the @SAS{} 
                    dataset near point

@kbd{C-@key{F10}} @kbd{C-@key{F10}} toggle-listing    
                    toggle @ESS{[SAS]}{} for @file{.lst} files; useful for 
                    toggling read-only
@end display

@code{SUBMIT}, @code{PROGRAM}, @code{LOG} and @code{OUTPUT} need no further explanation since
they mimic the @SAS{} Display Manager commands and related function key definitions.  
However, six other keys have been provided for convenience and are described below.

`shell' switches you to the @file{*shell*} buffer where you can interact with
your operating system.  This is especially helpful if you would like to 
kill a @SAS{} batch job.  You can specify a different buffer name to 
associate with a @SAS{} batch job (besides @file{*shell*}) with the buffer-local 
variable @code{ess-sas-shell-buffer}.  This allows you to have multiple 
buffers running @SAS{} batch jobs on multiple local/remote computers
that may rely on different methods specified by the buffer-local variable
@code{ess-sas-submit-method}.

@key{F2} performs the `refresh' operation on the current buffer.  `refresh'
compares the buffer's last modified date/time with the file's last
modified date/time and replaces the buffer with the file if the file is
newer.  This is the same operation that is automatically performed when
@code{LOG}, @code{OUTPUT}, `filetype-1' or @key{F11} are pressed.

`filetype-1' switches you to a file with the same file name as your @file{.sas}
file, but with a different extension (@file{.txt} by default) and performs
`refresh'.  You can over-ride the default extension; for example in your
@initfile{} file:
@example
(setq ess-sas-suffix-1 "csv") ; for example
@end example

@key{F9} will prompt you for the name of a permanent @SAS{} dataset near point to
be opened for viewing by @code{PROC FSEDIT}.  You can control the @SAS{} batch
command-line with @code{ess-sas-data-view-submit-options}.  For controlling the
@SAS{} batch commands, you have the global variables
@code{ess-sas-data-view-libname} and @code{ess-sas-data-view-fsview-command} as well
as the buffer-local variable @code{ess-sas-data-view-fsview-statement}.  If you
have your @SAS{} @code{LIBNAME} defined in @file{~/autoexec.sas}, then the defaults for
these variables should be sufficient.

Similarly, @kbd{C-@key{F9}} will prompt you for the name of a permanent @SAS{} dataset
near point to be opened for viewing by @code{PROC INSIGHT}.  You can control
the @SAS{} batch command-line with @code{ess-sas-data-view-submit-options}.  For
controlling the SAS{} batch commands, you have the global variables
@code{ess-sas-data-view-libname} and @code{ess-sas-data-view-insight-command} as well
as the buffer-local variable @code{ess-sas-data-view-insight-statement}. 

@key{F10} toggles @ESS{[SAS]}{} mode for @file{.log} files which is off by default
(technically, it is @code{SAS-log-mode}, but it looks the same).  The syntax
highlighting can be helpful in certain debugging situations, but large
@file{.log} files may take a long time to highlight.

@key{F11} is the same as `filetype-1' except it is @file{.dat} by default.  

@key{F12} will prompt you for the name of a @code{GSASFILE} near the point in @file{.log} to
be opened for viewing either with emacs or with an external viewer.
Depending on your version of emacs and the operating system you are
using, emacs may support @file{.gif} and @file{.jpg} files internally.  You may need
to change the following variables for your own situation.  
@code{ess-sas-graph-view-suffix-regexp} is a regular expression of supported 
file types defined via file name extensions.  
@code{ess-sas-graph-view-viewer-default} is the default external viewer for
your platform.  @code{ess-sas-graph-view-viewer-alist} is an alist of 
exceptions to the default; i.e. file types and their associated
viewers which will be used rather than the default viewer.
@example
(setq ess-sas-graph-view-suffix-regexp (concat "[.]\\([eE]?[pP][sS]\\|"
"[pP][dD][fF]\\|[gG][iI][fF]\\|[jJ][pP][eE]?[gG]\\|"
"[tT][iI][fF][fF]?\\)")) ;; default
(setq ess-sas-graph-view-viewer-default "kodakimg") ;; Windows default
(setq ess-sas-graph-view-viewer-default "sdtimage") ;; Solaris default
(setq ess-sas-graph-view-viewer-alist
  '(("[eE]?[pP][sS]" . "gv") ("[pP][dD][fF]" . "gv")) ;; default w/ gv
@end example

@kbd{C-@key{F2}} produces US landscape by default, however, it can produce A4
landscape (first line for "global" key mapping, second for "local"):
@example
(global-set-key [(control f2)] 'ess-sas-rtf-a4-landscape)
(define-key sas-mode-local-map [(control f2)] 'ess-sas-rtf-a4-landscape)
@end example


@comment  node-name,  next,  previous,  up
@node  IESS(SAS)--Interactive SAS processes, IESS(SAS)--Common problems, ESS(SAS)--Function keys for batch processing
@section IESS(SAS)--Interactive @SAS{} processes

Inferior @ESS{} (@IESS{}) is the method for interfacing with interactive
statistical processes (programs).  @IESS{[SAS]}{} is what is needed for
interactive @SAS{} programming.  @IESS{[SAS]}{} works best
with the @SAS{} command-line option settings
@code{"-stdio -linesize 80 -noovp -nosyntaxcheck"}
(the default of @code{inferior-SAS-args}).

@display
@code{-stdio}          
            required to make the redirection of stdio work
@code{-linesize 80}    
            keeps output lines from folding on standard terminals
@code{-noovp}          
            prevents error messages from printing 3 times
@code{-nosyntaxcheck}  
            permits recovery after syntax errors
@end display

To start up @IESS{[SAS]}{} mode, use:
@example
   @kbd{M-x SAS}
@end example

The @file{*SAS:1.log*} buffer in ESStr mode corresponds to the file
@file{@var{foo}.log} in @SAS{} batch usage and to the @code{SAS: LOG} window in the 
@SAS{} Display Manager.  All commands submitted to @SAS{}, informative
messages, warnings, and errors appear here.

The @file{*SAS:1.lst*} buffer in ESSlst mode corresponds to the file
@file{@var{foo}.lst} in @SAS{} batch usage and to the @code{SAS: OUTPUT} window in the
@SAS{} Display Manager.  All printed output appears in this window.

The @IESS{} @file{[SAS:1]} buffer exists solely as a communications buffer.
Files are edited in the @file{@var{foo}.sas} buffer.  The @kbd{C-c C-r} key in
@ESS{[SAS]}{} is the functional equivalent of bringing a file into the
@code{SAS: PROGRAM EDITOR} window followed by the 'Local' 'Submit' menu
commands.  The user should never use this buffer directly.

For example, open the file you want to work with.
@example
@kbd{C-x C-f foo.sas}
@end example
@file{@var{foo}.sas} will be in @ESS{[SAS]}{} mode.  Edit as appropriate, and then start 
up @SAS{} with the cursor in the @file{@var{foo}.sas} buffer.
@example
@kbd{M-x SAS}
@end example
Four buffers will appear on screen:
@example
Buffer          Mode            Description
@file{@var{foo}.sas}      @ESS{[SAS]}{}        your source file
@file{*SAS:1*}         @IESS{} [SAS:1]    @IESS{} communication buffer
@file{*SAS:1.log*}     Shell [] ESStr  @SAS{} log information
@file{*SAS:1.lst*}     Shell [] ESSlst @SAS{} listing information
@end example
If you would prefer each of the four buffers to appear in its
own individual frame, you can arrange for that.  Place the
cursor in the buffer displaying @file{@var{foo}.sas}.  Enter the
sequence @kbd{C-c C-w}. The cursor will normally be in buffer 
@file{@var{foo}.sas}.  If not, put it there and @kbd{C-x b @var{foo}.sas}.

Send regions, lines, or the entire file contents to @SAS{}
(regions are most useful:  a highlighted region will normally
begin with the keywords @code{DATA} or @code{PROC} and end with 
@code{RUN;}), @kbd{C-c C-r}.

Information appears in the log buffer, analysis results in the
listing buffer.  In case of errors, make the corrections in the
@file{@var{foo}.sas} buffer and resubmit with another @kbd{C-c C-r}.

At the end of the session you may save the log and listing
buffers with the usual @kbd{C-x C-s} commands.  You will be prompted
for a file name.  Typically, the names @file{@var{foo}.log} and @file{@var{foo}.lst}
will be used.  You will almost certainly want to edit the saved
files before including them in a report.  The files are
read-only by default.  You can make them writable by the emacs
command @kbd{C-x C-q}.

At the end of the session, the input file @file{@var{foo}.sas} will
typically have been revised.  You can save it.  It can be used
later as the beginning of another @IESS{[SAS]}{} session.  It can
also be used as a batch input file to @SAS{}.

The @file{*SAS:1*} buffer is strictly for @ESS{} use.  The user should
never need to read it or write to it.  Refer to the @file{.lst} and
@file{.log} buffers for monitoring output!

@c DANGER Will Robinson!
@c We plan to add
@c @display
@c - The ability to request help from a process for variables and
@c   functions, and to have the results sent into a separate buffer.
@c - completion of object names and file names.
@c @end display

Troubleshooting: @xref{IESS(SAS)--Common problems}.

@comment  node-name,  next,  previous,  up
@node   IESS(SAS)--Common problems, ESS(SAS)--Graphics, IESS(SAS)--Interactive SAS processes
@section IESS(SAS)--Common problems

@display
1. @IESS{[SAS]}{} does not work on Windows.  In order to run @SAS{} inside
   an emacs buffer, it is necessary to start @SAS{} with the @code{-stdio} option.
   @SAS{} does not support the @code{-stdio} option on Windows.

2. If @kbd{M-x SAS} gives errors upon startup, check the following:
   - you are running Windows:  see 1.
   - @file{ess-sas-sh-command} (in the @ESS{} @file{etc} directory) needs to be
     executable (solution: @code{chmod ugo+rx ess-sas-sh-command}).
   - sas isn't in your executable path (verify using @code{which sas} from
     a shell command-line)

3. @kbd{M-x SAS} starts @SAS{} Display Manager.  Probably, the command @code{sas}
   on your system calls a shell script.  Specify the path to the real 
   @code{sas} executable in @file{ess-sas-sh-command}, i.e.:
@example
/usr/local/sas612/sas </dev/tty 1>$stdout 2>$stderr $@@
@end example
   To find the @code{sas} exectuable, you can execute the @UNIX{} command:
@example
find / -name sas -print
@end example
@end display

@comment  node-name,  next,  previous,  up
@node   ESS(SAS)--Graphics, ESS(SAS)--Windows, IESS(SAS)--Common problems
@section ESS(SAS)--Graphics

Output from a @SAS{/GRAPH} @code{PROC} can be displayed in a @SAS{/GRAPH} window for @SAS{} batch
on Windows or for both @SAS{} batch and interactive with XWindows on @UNIX{}.  If
you need to create graphics files and view them with @key{F12}, then include
the following (either in @file{@var{foo}.sas} or in your @file{autoexec.sas}):
@example
filename gsasfile 'graphics.ps'; 
goptions device=ps gsfname=gsasfile gsfmode=append; 
@end example
@code{PROC PLOT} graphs can be viewed in the listing buffer.  You may
wish to control the vertical spacing to allow the entire plot
to be visible on screen, for example:
@example
proc plot;
    plot a*b / vpos=25;
run;
@end example

@comment  node-name,  next,  previous,  up
@node   ESS(SAS)--Windows,  , ESS(SAS)--Graphics
@section ESS(SAS)--Windows

@itemize @bullet
@item
@IESS{[SAS]}{} does not work on Windows.  @xref{IESS(SAS)--Common problems}.

@item
@ESS{[SAS]}{} mode for editing @SAS{} language files works very well.
@xref{ESS(SAS)--Editing files}.

@item
There are two execution options for @SAS{} on Windows.
You can use batch.  @xref{ESS(SAS)--Batch SAS processes}.

Or you can mark regions with the mouse and submit the code with
`submit-region' or paste them into @SAS{} Display Manager.

@end itemize

@comment Local Variables:
@comment TeX-master: "ess.texi"
@comment End:
