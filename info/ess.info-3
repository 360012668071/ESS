This is ess.info, produced by makeinfo version 4.2 from ess.texi.

START-INFO-DIR-ENTRY
* ESS: (ess). Emacs Speaks Statistics (S/S+/R, SAS, BUGS, Stata, XLisp-Stat).
END-INFO-DIR-ENTRY

ESS -- Emacs Speaks Statistics
******************************

   Currently maintained by A.J. (Tony) Rossini, Richard M. Heiberger,
Kurt Hornik, Martin Maechler, and Rodney A. Sparapani.

   This file documents `ESS', a GNU Emacs package for running
`S(plus)', `R', `XLisp-Stat', `SAS' and potentially any other
interactive `statistical' languages in an `inferior' buffer, editing
source code in these languages and interacting with the running program.

   This documentation relates to Version 5.1.22 of `ESS'.

   Original Info Author: David M. Smith (<D.M.Smith@lancaster.ac.uk>),
Department of Mathematics and Statistics, Lancaster University, UK.

   Current Info Author: A.J. Rossini
(<rossini@biostat.washington.edu>), Department of Biostatistics,
University of Washington, Seattle, WA 98185, USA


File: ess.info,  Node: ESS(S)--Editing files,  Next: iESS(S)--Inferior ESS processes,  Up: Help for the S family

ESS[S]-Editing files
====================

   ESS[S] is the mode for editing S language files.  This mode handles:

   -  proper indenting, generated by both [Tab] and [Return].

   -  color and font choices based on syntax.

   -  ability to send the contents of an entire buffer, a highlighted
     region, an S function, or a single line to an inferior S process,
     if   one is currently running.

   -  ability to switch between processes which would be the target of
     the   buffer (for the above).

   -  The ability to request help from an S process for variables and
     functions, and to have the results sent into a separate buffer.

   -  completion of object names and file names.

   ESS[S] mode should be automatically turned on when loading a file
with the suffices found in ess-site (*.R, *.S, *.s, etc).  However, one
will have to start up an inferior process to take advantage of the
interactive features.


File: ess.info,  Node: iESS(S)--Inferior ESS processes,  Next: Handling and Reusing Transcripts,  Prev: ESS(S)--Editing files,  Up: Help for the S family

iESS[S]-Inferior ESS processes
==============================

   iESS (inferior ESS) is the mode for interfacing with active
statistical processes (programs).  This mode handles:

   -  proper indenting, generated by both [Tab] and [Return].

   -  color and font highlighting based on syntax.

   -  ability to resubmit the contents of a multi-line command  to the
     executing process with a single keystroke [RET].

   -  The ability to request help from the current process for variables
     and functions, and to have the results sent into a separate
     buffer.

   -  completion of object names and file names.

   -  interactive history mechanism

   -  transcript recording and editing

   To start up iESS mode, use:
        M-x S+3
        M-x S4
        M-x R

   (for S-PLUS 3.x, S4, and R, respectively.  This assumes that you have
access to each).  Usually the site will have defined one of these
programs (by default S+3) to the simpler name:

   M-x S

   Note that R has some extremely useful command line arguments, -v and
-n.   To enter these, call R using a "prefix argument", by

   C-u M-x R

   and when ESS prompts for "Starting Args ? ", enter (for example):

   -v 10000 -n 5000

   Then that R process will be started up using "R -v 10000 -n 5000".

   New for ESS 5.1.2 (and later):  "S-elsewhere" command

   The idea of "M-x S-elsewhere" is that we open a telnet (or rlogin)
to another machine, call the buffer "*S-elsewhere*", and then run S
on the other machine in that buffer.  We do that by defining "sh" as
the inferior-S-elsewhere-program-name.  Emacs sets it up in a
"*S-elsewhere*" iESS buffer.  The user does a telnet or login from
that buffer to the other machine and then starts S on the other
machine.  The usual C-c C-n commands from myfile.s on the local
machine get sent through the buffer "*S-elsewhere*" to be executed   by
S on the other machine.


File: ess.info,  Node: Handling and Reusing Transcripts,  Next: ESS-help--assistance with viewing help,  Prev: iESS(S)--Inferior ESS processes,  Up: Help for the S family

Handling and Reusing Transcripts
================================

   - edit transcript

   - color and font highlighting based on syntax.

   - resubmit multi-line commands to an active process buffer

   - The ability to request help from an S process for variables and
functions, and to have the results sent into a separate buffer.

   - ability to switch between processes which would be the target of
the   buffer (for the above).


File: ess.info,  Node: ESS-help--assistance with viewing help,  Next: Philosophies for using ESS(S),  Prev: Handling and Reusing Transcripts,  Up: Help for the S family

ESS-help-assistance with viewing help
=====================================

   * move between help sections

   * send examples to S for evaluation


File: ess.info,  Node: Philosophies for using ESS(S),  Next: Scenarios for use (possibilities--based on actual usage),  Prev: ESS-help--assistance with viewing help,  Up: Help for the S family

Philosophies for using ESS[S]
=============================

   The first is preferred, and configured for.  The second one can be
retrieved again, by changing emacs variables.

   1: (preferred by the current group of developers):  The source code
is    real.  The objects are realizations of the source code.  Source
for EVERY user modified object is placed in a particular directory
or directories, for later editing and retrieval.

   2: (older version): S objects are real.  Source code is a temporary
 realization of the objects.  Dumped buffers should not be saved.
_We_strongly_discourage_this_approach_.  However, if you insist,    add
the following lines to your .emacs file (GNU emacs uses the filename
`~/.emacs' and Xemacs uses the filename `~/.xemacs/init.el' for the
initialization file):
     (setq ess-keep-dump-files 'nil)
     (setq ess-delete-dump-files t)
     (setq ess-mode-silently-save nil)
   The second saves a small amount of disk space.  The first allows for
better portability as well as external version control for code.


File: ess.info,  Node: Scenarios for use (possibilities--based on actual usage),  Next: Customization Examples and Solutions to Problems,  Prev: Philosophies for using ESS(S),  Up: Help for the S family

Scenarios for use (possibilities-based on actual usage)
=======================================================

   We present some basic suggestions for using ESS to interact with S.
These are just a subset of approaches, many better approaches are
possible.  Contributions of examples of how you work with ESS are
appreciated (especially since it helps us determine priorities on
future enhancements)! (comments as to what should be happening are
prefixed by "##").
     1:  ##    Data Analysis Example (source code is real)
         ## Load the file you want to work with
         C-x C-f myfile.s
     
         ## Edit as appropriate, and then start up S-PLUS 3.x
         M-x S+3
     
         ## A new buffer *S+3:1* will appear.  Splus will have been started
         ## in this buffer.  The buffer is in iESS [S+3:1] mode.
     
         ## Split the screen and go back to the file editing buffer.
         C-x 2 C-x b myfile.s
     
         ## Send regions, lines, or the entire file contents to S-PLUS.  For regions,
         ## highlight a region with keystrokes or mouse and then send with:
         C-c C-r
     
         ## Re-edit myfile.s as necessary to correct any difficulties.  Add
         ## new commands here.  Send them to S by region with C-c C-r, or
         ## one line at a time with C-c C-n.
     
         ## Save the revised myfile.s with C-x C-s.
     
         ## Save the entire *S+3:1* interaction buffer with C-c C-s.  You
         ## will be prompted for a file name.  The recommended name is
         ## myfile.St.  With the *.St suffix, the file will come up in ESS
         ## Transcript mode the next time it is accessed from Emacs.
     
     
     
     2:  ## Program revision example (source code is real)
     
         ## Start up S-PLUS 3.x in a process buffer (this will be *S+3:1*)
         M-x S+3
     
         ## Load the file you want to work with
         C-x C-f myfile.s
     
         ## edit program, functions, and code in myfile.s, and send revised
         ## functions to S when ready with
         C-c C-f
         ## or highlighted regions with
         C-c C-r
         ## or individual lines with
         C-c C-n
         ## or load the entire buffer with
         C-c C-l
     
         ## save the revised myfile.s when you have finished
         C-c C-s
     
     
     
     3:  ## Program revision example (S object is real)
     
         ## Start up S-PLUS 3.x in a process buffer (this will be *S+3:1*)
         M-x S+3
     
         ## Dump an existing S object my.function into a buffer to work with
         C-c C-d my.function
         ## a new buffer named yourloginname.my.function.S will be created with
         ## an editable copy of the object.  The buffer is associated with the
         ## pathname /tmp/yourloginname.my.function.S and will amlost certainly not
         ## exist after you log off.
     
         ## enter program, functions, and code into work buffer, and send
         ## entire contents to S-PLUS when ready
         C-c C-b
     
         ## Go to *S+3:1* buffer, which is the process buffer, and examine
         ## the results.
         C-c C-y
         ## The sequence C-c C-y is a shortcut for:  C-x b *S+3:1*
     
         ## Return to the work buffer (may/may not be prefixed)
         C-x C-b yourloginname.my.function.S
         ## Fix the function that didn't work, and resubmit by placing the
         ## cursor somewhere in the function and
         C-c C-f
         ## Or you could've selected a region (using the mouse, or keyboard
         ## via setting point/mark) and
         C-c C-r
         ## Or you could step through, line by line, using
         C-c C-n
         ## Or just send a single line (without moving to the next) using
         C-c C-j
         ## To fix that error in syntax for the "rchisq" command, get help
         ## by
         C-c C-v rchisq
     
     
     4:    Data Analysis (S object is real)
         ## Start up S-PLUS 3.x, in a process buffer (this will be *S+3:1*)
         M-x S+3
     
         ## Work in the process buffer.  When you find an object that needs
         ## to be changed (this could be a data frame, or a variable, or a
         ## function), dump it to a buffer:
         C-c C-d my.cool.function
     
         ## Edit the function as appropriate, and dump back in to the
         ## process buffer
         C-c C-b
     
         ## Return to the S-PLUS process buffer
         C-c C-y
         ## Continue working.
     
         ## When you need help, use
         C-c C-v rchisq
         ## instead of entering:   help("rchisq")


File: ess.info,  Node: Customization Examples and Solutions to Problems,  Prev: Scenarios for use (possibilities--based on actual usage),  Up: Help for the S family

Customization Examples and Solutions to Problems
================================================

   1. Suppose that you are primarily an SPLUS 3.4 user, occasionally
using S version 4, and sick and tired of the buffer-name *S+3*    we've
stuck you with.  Simply edit the "ess-dialect" alist entry in    the
essd-s+3.el and essd-s4.el files to be "S" instead of "S4" and
"S+3".  This will insure that all the inferior process buffer names
are "*S*".

   2. Suppose that you WANT to have the first buffer name indexed by
":1", in the same manner as your S-PLUS processes 2,3,4, and 5 (for
you heavy simulation people).  Then uncomment the line in ess-site
(or add after your (require 'ess-site) or (load "ess-site") command
in your .emacs file, the line:
     (setq ess-plain-first-buffername nil)
      )

   3. Fontlocking sometimes fails to behave nicely upon errors.  When
Splus dumps, a mis-matched "  (double-quote) can result in the
wrong font-lock face being used for the remainder of the buffer.

   Solution: add a " at the end of the "Dumped..." statement, to
revert the font-lock face back to normal.


File: ess.info,  Node: Help for SAS,  Prev: Help for the S family,  Up: Help for Statistical Packages

Help for SAS
************

* Menu:

* ESS(SAS)--Design philosophy::
* ESS(SAS)--Editing files::
* iESS(SAS)--Interactive SAS processes::
* ESS(SAS)--Batch SAS processes::
* ESS(SAS)--Function keys for batch processing::
* ESS(SAS)--TAB key::
* ESS(SAS)--Usage scenarios::
* iESS(SAS)--Common problems::
* ESS(SAS)--MS Windows::

   ESS[SAS] was designed for use with SAS.  It is descended from emacs
macros developed by John Sall for editing SAS programs and SAS-mode by
Tom Cook.  Those editing features and new advanced features are part of
ESS[SAS].  The user interface of ESS[SAS] has similarities with ESS[S]
and the SAS Display Manager.  By emacs, we mean either GNU Emacs from
the Free Software Foundation or XEmacs from the XEmacs Project.


File: ess.info,  Node: ESS(SAS)--Design philosophy,  Next: ESS(SAS)--Editing files,  Prev: Help for SAS,  Up: Help for SAS

ESS[SAS]-Design philosophy
==========================

   ESS[SAS] was designed to aid the user in writing and maintaining SAS
programs, such as myfile.sas.  Both interactive and batch submission of
SAS programs is supported.

   ESS[SAS] was written with two primary goals.

   1. Using the emacs environment is desirable for users accessing a
remote computer via a network or dial-up who can not use the SAS
Display Manager.

   2. Using the emacs environment is desirable for local users as well
due to the inherent efficiency of using the same, superior interface
all of the time.


File: ess.info,  Node: ESS(SAS)--Editing files,  Next: iESS(SAS)--Interactive SAS processes,  Prev: ESS(SAS)--Design philosophy,  Up: Help for SAS

ESS[SAS]-Editing files
======================

   ESS[SAS] is the mode for editing SAS language files.  This mode
handles:

     - proper indenting, generated by both [Tab] and [Return].
     - color and font choices based on syntax.
     - ability to send the contents of an entire buffer, a highlighted region,
       or a single line to an interactive SAS process.
     - ability to switch between processes which would be the target of the
       buffer (for the above).
     - ability to save and submit the file you are working on as a batch SAS
       process with a single keypress and to continue editing while it is runs
       in the background.
     - capability of killing the batch SAS process through the shell buffer or
       allow the SAS process to keep on running after you exit emacs.
     - single keypress navigation of .sas, .log and .lst files (.log and .lst
       files are automatically refreshed with each keypress).

   ESS[SAS] is automatically turned on when editing a file with a ".sas"
suffix (or other, if specified in ess-site via auto-mode-alist).  The
batch processing keypress commands can be enabled to use the same
function keys that the SAS Display Manager does.  The interactive
capabilities of ESS require you to start an inferior SAS process with
M-x SAS (*Note iESS(SAS)--Interactive SAS processes::.)

   At this writing (5.1.22), the indenting and syntax highlighting are
generally correct.  Known issues:  for multiple line * or %* comments,
only the first line is highlighted; for .log files, only the first line
of a NOTE:, WARNING: or ERROR: message is highlighted; unmatched
single/double quotes in CARDS data lines are NOT ignored.


File: ess.info,  Node: iESS(SAS)--Interactive SAS processes,  Next: ESS(SAS)--Batch SAS processes,  Prev: ESS(SAS)--Editing files,  Up: Help for SAS

iESS[SAS]-Interactive SAS processes
===================================

   iESS (inferior ESS) is the method for interfacing with interactive
statistical processes (programs).  iESS[SAS] is what is needed for
interactive SAS programming.  iESS[SAS] works best with the following
settings for SAS command-line options (the default of
inferior-SAS-args):

     -stdio -linesize 80 -noovp -nosyntaxcheck

     -stdio          required to make the redirection of stdio work
     -linesize 80    keeps output lines from folding on standard terminals
     -noovp          prevents error messages from printing 3 times
     -nosyntaxcheck  permits recovery after syntax errors

   To start up iESS[SAS] mode, use:
        M-x SAS

   The *SAS:1.log* buffer in ESStr mode corresponds to the file
myfile.log in SAS batch usage and to the "SAS: LOG" window in the SAS
Display Manager.  All commands submitted to SAS, informative messages,
warnings, and errors appear here.

   The *SAS:1.lst* buffer in ESSlst mode corresponds to the file
myfile.lst in SAS batch usage and to the "SAS: OUTPUT" window in the
SAS Display Manager.  All data related printed output from the PROCs
appear in this window.

   The iESS [SAS:1] buffer exists solely as a communications buffer.
Files are edited in the myfile.sas buffer.  The C-c C-r key in ESS[SAS]
is the functional equivalent of bringing a file into the "SAS: PROGRAM
EDITOR" window followed by the 'Local' 'Submit' menu commands.  The
user should never use this buffer directly.

   Troubleshooting: *Note iESS(SAS)--Common problems::.


File: ess.info,  Node: ESS(SAS)--Batch SAS processes,  Next: ESS(SAS)--Function keys for batch processing,  Prev: iESS(SAS)--Interactive SAS processes,  Up: Help for SAS

ESS[SAS]-Batch SAS processes
============================

   Submission of a SAS batch job is dependent on your environment.
ess-sas-submit-method is determined by your operating system and your
shell.  It defaults to 'sh unless you are running Windows or Mac
Classic.  Under Windows, it will default to 'sh if you are using bash
for your shell rather than MS-DOS ('ms-dos).  On Mac OS X, it will
default to 'sh, but under Mac Classic AppleScript is used
('apple-script).  You will also set this to 'sh if the SAS batch job
needs to run on a remote machine rather than your local machine.  This
works transparently if you are editing the remote file via ange-ftp/EFS
or tramp.  However, if you are editing the file locally and
transferring it back and forth with Kermit, you need some additional
steps.  First of all, start Kermit locally before remotely logging in.
Open a local copy of the file with the ess-kermit-prefix character
prepended (the default is "#").  Execute the command ess-kermit-get
which brings the contents of the remote file into your local copy.
Also, note that the remote Kermit command is defined by
ess-kermit-command.

   The command used by the SUBMIT function key (F3 or F8) to submit a
batch SAS job, whether local or remote, is ess-sas-submit-command which
defaults to sas-program.  sas-program is "invoke SAS using program
file" for Mac Classic and "sas" otherwise.  However, you may have to
alter ess-sas-submit-command for a particular program, so it is defined
as buffer-local (conveniently, you can set it in Local Variables: at
the end of your program).  The command line is also made of
ess-sas-submit-pre-command, ess-sas-submit-post-command and
ess-sas-submit-command-options (the last of which is also buffer-local).
Here are some examples for your .emacs file (you may also use M-x
customize-variable with):
     (setq ess-sas-submit-pre-command "nohup")                 ;'sh default
     (setq ess-sas-submit-post-command "-rsasuser &")          ;'sh default
     (setq ess-sas-submit-command "/usr/local/sas/sas")        ;'sh example
     (setq ess-sas-submit-pre-command "start")                 ;'ms-dos default
     (setq ess-sas-submit-post-command "-rsasuser -icon")      ;'ms-dos default
     (setq ess-sas-submit-command "c:/progra~1/sas/sas.exe")   ;Windows example
     (setq ess-sas-submit-command "c:\\progra~1\\sas\\sas.exe");Windows example

   There is a built-in delay before a batch SAS job is submitted when
using a Unix shell under Windows.  This is necessary in many cases
since the shell might not be ready to receive a command.  This delay is
currently set high enough so as not to be a problem.  But, there may be
cases when it needs to be set higher, or could be set much lower to
speed things up.  You can over-ride the default in your .emacs file by:
     (setq ess-sleep-for 0.2)


File: ess.info,  Node: ESS(SAS)--Function keys for batch processing,  Next: ESS(SAS)--TAB key,  Prev: ESS(SAS)--Batch SAS processes,  Up: Help for SAS

ESS[SAS]-Function keys for batch processing
===========================================

   The setup of function keys for SAS batch processing is unavoidably
complex, but the usage of function keys is simple.  There are five
distinct options:

   Option 1 (default).  Function keys in ESS[SAS] are not bound to
elisp commands.  This is in accordance with the GNU Elisp Coding
Standards (GECS) which do not allow function keys to be bound so that
they are available to the user.

   Options 2-5.  Since GECS does not allow function keys to be bound by
modes, these keys are often unused.  So, ESS[SAS] provides users with
the option of binding elisp commands to these keys.  Users who are
familiar with SAS will, most likely, want to duplicate the function key
capabilities of the SAS Display Manager.  There are four options (noted
in parentheses below).

  a. SAS provides different function key definitions with its Unix (2,
     4) and Windows (3, 5) products; ESS can use either.

  b. The ESS[SAS] function key definitions can be active in all buffers
     (global: 4, 5) or limited (local: 2, 3) only to buffers with files
     that are associated with ESS[SAS] as defined in your
     auto-mode-alist.

   The distinction between local and global is subtle.  If you want the
ESS[SAS] definitions to work when you are in the *shell* buffer or when
editing files other than the file extensions that ESS[SAS] recognizes,
you will most likely want to use the global definitions.  If you want
your function keys to understand SAS batch commands when you are
editing SAS files, and to behave normally when editing other files,
then you will choose the local definitions.  The option can be chosen by
the person installing ESS for a site or by an individual.

  1. For a site installation or an individual, uncomment ONLY ONE of the
     following lines in your ess-site.el!  ESS[SAS] Function keys are
     available in ESS[SAS] if you uncomment either 2 or 3 and in all
     modes if you uncomment 4 or 5:
          ;;2; (setq ess-sas-local-unix-keys t)
          ;;3; (setq ess-sas-local-pc-keys t)
          ;;4; (setq ess-sas-global-unix-keys t)
          ;;5; (setq ess-sas-global-pc-keys t)

     The names -unix- and -pc- have nothing to do with the operating
     system that you are running.  Rather, they mimic the definitions
     that the SAS Display Manager uses by default on those platforms.

  2. If your site installation has configured the keys contrary to your
     liking, say 2, you must turn it off before selecting a different
     option, say 3.
           (load "ess-site")
           (setq ess-sas-local-unix-keys nil) ;;2
           (setq ess-sas-local-pc-keys t)     ;;3

   Finally, we get to what the function keys actually do.  You may
recognize some of the Short Names as SAS Display Manager commands (they
are in all capitals).

     Unix PC   Short Name    Long Description
     
     F2   F2   refresh       revert the current buffer with the file of the
                             same name if the file is newer than the buffer
     
     F3   F8   SUBMIT        save the current .sas file (which is either the
                             .sas file in the current buffer or the .sas
                             file associated with the .lst or .log file in the
                             current buffer) and submit the file as a batch
                             SAS job
     
     F4   F5   PROGRAM       switch buffer to .sas file
     
     F5   F6   LOG           switch buffer to .log file, `refresh' and goto
                             next error message, if any
     
     F6   F7   OUTPUT        switch buffer to .lst file and `refresh'
     
     F7   F4   filetype-1    switch buffer to filetype-1 (defaults to .txt)
                             file and `refresh'
     
     F8   F3   shell         switch buffer to shell
     
     F9   F9   VIEWTABLE     open an interactive FSEDIT/FSBROWSE session
                             on the SAS dataset near point
     
     F10  F10  toggle-log    toggle ESS[SAS] for .log files; may be useful
                             for certain debugging situations
     
     F11  F11  filetype-2    switch buffer to filetype-2 (defaults to .dat)
                             file and `refresh'
     
     F12  F12  viewgraph     open a GSASFILE near point for viewing either
                             in emacs or with an external viewer
     
     C-F3 C-F8 submit-region    write region to temporary file,
                                and submit to SAS
     
     C-F5 C-F6 append-to-log    append ess-temp.log to the current .log file
     
     C-F6 C-F7 append-to-output append ess-temp.lst to the current .lst file

   SUBMIT, PROGRAM, LOG and OUTPUT need no further explanation since
they mimic the SAS Display Manager function key definitions.  However,
six other keys have been provided for convenience and are described
below.

   `shell' switches you to the *shell* buffer where you can interact
with your operating system.  This is especially helpful if you would
like to kill a SAS batch job.  You can specify a different buffer name
to associate with a SAS batch job (besides *shell*) with the
buffer-local variable ess-sas-shell-buffer.  This allows you to have
multiple buffers running SAS batch jobs on multiple local/remote
computers that may rely on different methods specified by the
buffer-local variable ess-sas-submit-method.

   F2 performs the `refresh' operation on the current buffer.  `refresh'
compares the buffer's last modified date/time with the file's last
modified date/time and replaces the buffer with the file if the file is
newer.  This is the same operation that is automatically performed when
LOG, OUTPUT, `filetype-1' or `filetype-2' are pressed.

   `filetype-1' switches you to a file with the same file name as your
.sas file, but with a different extension (.txt by default) and
performs `refresh'.  You can over-ride the default extension; for
example in your .emacs file:
     (setq ess-sas-suffix-1 "csv") ; for example

   F9 will prompt you for the name of a permanent SAS dataset near
point to be opened for viewing by PROC FSEDIT.  You can control the SAS
batch command-line with ess-sas-data-view-submit-options.  For
controlling the SAS batch commands, you have the global variables
ess-sas-data-view-libname and ess-sas-data-view-fsview-command as well
as the buffer-local variable ess-sas-data-view-fsview-statement.  If
you have your SAS LIBNAMEs defined in autoexec.sas, then the defaults
for these variables should be sufficient.

   F10 toggles ESS[SAS] mode for .log files which is off by default
(technically, it is SAS-log-mode, but it looks the same).  The syntax
highlighting can be helpful in certain debugging situations, but large
.log files may take a long time to highlight.

   F11 is the same as `filetype-1' except it is .dat by default.

   F12 will prompt you for the name of a GSASFILE near point to be
opened for viewing either with emacs or with an external viewer.
Depending on your version of emacs and the operating system you are
using, emacs may support .gif and .jpg files internally.  You may need
to change the following two variables for your own situation:
     (setq ess-sas-graph-suffix-regexp "[.]\\(e?ps\\|gif\\|jpe?g\\|tiff?\\)")
     (setq ess-sas-image-viewer "kodakimg") ;; Windows external viewer


File: ess.info,  Node: ESS(SAS)--TAB key,  Next: ESS(SAS)--Usage scenarios,  Prev: ESS(SAS)--Function keys for batch processing,  Up: Help for SAS

ESS[SAS]-TAB key
================

   Two options.  The TAB key is bound by default to sas-indent-line.
This function is used to syntactically indent SAS code so PROC and RUN
are in the left margin, other statements are indented 4 spaces from the
margin, continuation lines are indented 4 spaces in from the beginning
column of that statement.  This is the type of functionality that emacs
provides in most programming language modes.  This functionality is
equivalent to uncommenting the following line in ess-site.el:
     (setq ess-sas-edit-keys-toggle 0)

   ESS provides an alternate behavior for the TAB key that makes it
behave as it does in other editors, i.e. move the cursor to the next
tab stop.  The alternate behavior also provides a backwards TAB, C-TAB,
that moves the cursor to the tab stop to the left and deletes any
characters between them.  This functionality is obtained by
uncommenting the following line in ess-site.el:
     (setq ess-sas-edit-keys-toggle 1)
   Under the alternate behavior, the TAB key is bound to tab-to-tab-stop
and the tab stops are set at multiples of sas-indent-width.


File: ess.info,  Node: ESS(SAS)--Usage scenarios,  Next: iESS(SAS)--Common problems,  Prev: ESS(SAS)--TAB key,  Up: Help for SAS

ESS[SAS]-Usage scenarios
========================

   We present one scenario for using ESS to interact with SAS (comments
are prefixed by "##").

   SAS Batch (ess-sas-global-unix-keys shown with
ess-sas-global-pc-keys denoted by -pc- comments)
         ## Find the file you want to work with
         C-x C-f myfile.sas
         ## myfile.sas will be in ESS[SAS] mode
     
         ## Edit as appropriate, then save and submit the batch SAS job.
         ## -pc- F8
         F3
     
         ## The job runs in the shell buffer while you continue to edit
         ## myfile.sas.  If ess-sas-submit-method is 'sh, then the
         ## message buffer will display the shell notification when the
         ## job is complete.  The 'sh setting also allows you to
         ## terminate the SAS batch job before it is finished.
         ## -pc- F3
         F8
     
         ## Terminating a SAS batch job; typing in the *shell* buffer.
         kill %1
     
         ## You may want to visit the .log (whether the job is still running or
         ## it is finished) and check for error messages.  The .log will be
         ## refreshed and you will be placed in it's buffer.  You will be taken
         ## to the 1st error message after the cursor, if any.
         ## -pc- F6
         F5
     
         ## Goto the next error message, if any.
         ## -pc- F6
         F5
     
         ## Now, refresh the .lst and go to it's buffer.
         ## -pc- F7
         F6
     
         ## If you wish to make changes, go to the .sas file with
         ## -pc- F5
         F4
     
         ## Make your editing changes and submit again.
         ## -pc- F8
         F3

   Interactive SAS
         ## Find the file you want to work with
         C-x C-f myfile.sas
         ## myfile.sas will be in ESS[SAS] mode
     
         ## Edit as appropriate, and then start up SAS with the cursor in
         ## the myfile.sas buffer
         M-x SAS
     
         ## Four buffers will appear on screen:
         ## myfile.sas  in  ESS[SAS]        mode # your source file
         ## *SAS:1*     in  iESS [SAS:1]    mode # ESS communication buffer
         ## *SAS:1.log* in  Shell [] ESStr  mode # SAS log information
         ## *SAS:1.lst* in  Shell [] ESSlst mode # SAS listing information
     
         ## If you would prefer each of the four buffers to appear in its
         ## own individual frame, you can arrange for that.  Place the
         ## cursor in the buffer displaying myfile.sas.  Enter the
         ## sequence:
         C-c C-w
     
         ## The cursor will normally be in buffer myfile.sas.
         ## If not, put it there:
         C-x b myfile.sas
     
         ## Send regions, lines, or the entire file contents to SAS
         ## (regions are most useful).  A highlighted region will normally
         ## begin with the keywords 'DATA' or 'PROC' and end with the
         ## keyword 'RUN;'
         C-c C-r
     
         ## Information appears in the log buffer, analysis results in the
         ## listing buffer.  In case of errors, make the corrections in the
         ## myfile.sas buffer and resubmit with another C-c C-r
     
         ## PROC GPLOT graphs will normally be produced in a postscript
         ## file and be viewed later.  Include the lines
         /* required gsoptions for batch files */
         /* comment out these lines for interactive use on X-terminals*/
         filename grafout 'temp.ps';
         goptions device=ps gsfname=grafout gsfmode=append gaccess=sasgastd;
         ## in myfile.sas.
     
         ## PROC PLOT graphs can be viewed in the listing buffer.  You may
         ## wish to control the vertical spacing to allow the entire plot
         ## to be visible on screen, for example, by
         proc plot; plot a*b / vpos=25;
     
         ## At the end of the session you may save the log and listing
         ## buffers with the usual C-x C-s commands.  You will be prompted
         ## for a file name.  Typically, the names myfile.log and mfile.lst
         ## will be used.  You will almost certainly want to edit the saved
         ## files before including them in a report.  The files are
         ## read-only by default.  You can make them writable by the emacs
         ## command C-x C-q.
     
         ## At the end of the session, the input file myfile.sas will
         ## typically have been revised.  You can save it.  It can be used
         ## later as the beginning of another iESS[SAS] session.  It can
         ## also be used as a batch input file to SAS.
     
         ## The *SAS:1* buffer is strictly for ESS use.  The user should
         ## never need to read it or write to it.  Refer to the .lst and
         ## .log buffers for monitoring output!


File: ess.info,  Node: iESS(SAS)--Common problems,  Next: ESS(SAS)--MS Windows,  Prev: ESS(SAS)--Usage scenarios,  Up: Help for SAS

iESS[SAS]-Common problems
=========================

     1. iESS[SAS] does not work on Windows.  In order to run SAS inside
        an emacs buffer, it is necessary to start SAS with the -stdio option.
        SAS does not support the -stdio option on Windows.
     
     2. If M-x SAS gives errors upon startup, check the following:
        - you are running Windows:  see 1.
        - ess-sas-sh-command (in the ESS source directory) needs to be
          executable (solution: "chmod ugo+rx ess-sas-sh-command").
        - sas isn't in your executable path (verify using "which sas" from
          a shell command-line)
     
     3. M-x SAS starts SAS Display Manager.  Probably, the command "sas"
        on your system calls a shell script.
     
        Change the line in ess-sas-sh-command file from:
          sas </dev/tty 1>$stdout 2>$stderr $
        to the correct path name of the sas executable, for example:
          /usr/local/sas612/sas </dev/tty 1>$stdout 2>$stderr $
        To find the sas exectuable, you can execute the unix command:
          find / -name sas -print
        and expect a response similar to the following
          /usr/local/sas612/sas


File: ess.info,  Node: ESS(SAS)--MS Windows,  Prev: iESS(SAS)--Common problems,  Up: Help for SAS

ESS[SAS]-MS Windows
===================

   * iESS[SAS] does not work on Windows.  *Note iESS(SAS)--Common
     problems::.

   * ESS[SAS] mode for editing SAS language files works very well.
     *Note ESS(SAS)--Editing files::.

   * There are two execution options for SAS on Windows.  You can use
     batch.  *Note ESS(SAS)--Batch SAS processes::.

     Or you can mark regions with the mouse and submit the code with
     `submit-region' or paste them into SAS Display Manager.



File: ess.info,  Node: Installation,  Next: Customization,  Prev: Help for Statistical Packages,  Up: Top

Installing ESS on your system
*****************************

   The following section details those steps necessary to get ESS
running on your system.

* Menu:

* Unix installation::              Installing ESS on your Unix system
* Microsoft Windows installation:: Installing ESS on your MS Windows system
* Requirements::         emacs, Operating Systems and Statistical Packages
* System dependent::               Other variables you may need to change

   We now discuss installation, which might happen under Unix or
Microsoft Windows.  First, we discuss Unix installation.  *Note Unix
installation::.

   For Microsoft Windows Installation please skip to the *Note
Microsoft Windows installation::.


File: ess.info,  Node: Unix installation,  Next: Microsoft Windows installation,  Up: Installation

Unix installation
=================

  1. cd to a directory where you want to install ESS, creating it if
     necessary.  This directory will be referred to below as ESSDIR.

  2. Retrieve the gzipped tar file
     (http://software.biostat.washington.edu/ess/ess-5.1.22.tar.gz) to
     ESSDIR.

  3. Decompress/unarchive the files from the disribution.
          gunzip ess-5.1.22.tar.gz
          tar xvf ess-5.1.22.tar

          (or: `gunzip < ess-5.1.22.tar.gz | tar xvf -' ).
          (or using GNU tar:  `tar zxvf ess-5.1.22.tar.gz').

     The `tar' command will create the subdirectory ess-5.1.22 and
     unarchive the files there.

     If you are using GNU Emacs 19.29, decompress/unarchive
     `ESSDIR/ess-5.1.22/lisp/19.29.tar.gz', read
     `ESSDIR/ess-5.1.22/lisp/19.29/README', follow the instructions and
     you might be able to get ESS to work.  _Please note that GNU Emacs
     19.29 is no longer supported_.  For a list of supported versions
     of emacs, see *Note Requirements::.

  4. Edit the file `ESSDIR/ess-5.1.22/lisp/ess-site.el' as explained in
     the comments section of that file.

  5.  Add the line
          (load "ESSDIR/ess-5.1.22/lisp/ess-site")
     to your user or system installation file (GNU Emacs uses
     `$HOME/.emacs' and XEmacs uses `$HOME/.xemacs/init.el' for the
     user initialization file.  GNU Emacs uses default.el or
     site-init.el and XEmacs uses site-start.el for the system
     installation file).

     Alternatively, if ess-site.el is in your current Lisp path, you
     can do:
          (require 'ess-site)
     to configure emacs for ESS.

  6. That's it!  To edit statistical programs, load the files with the
     requiste extensions  (".sas" for SAS, ".S" for S-PLUS, ".R" for R,
     and ".lsp" for XLispStat).

  7. (OPTIONAL) If you are running S-PLUS or R, you might consider
     installing the database files.  From within emacs, `C-x d' to the
     directory containing ESS.  Now:
          M-x S+6
     get running.  once you have reached the SPLUS prompt, do:
          M-x ess-create-object-name-db
     (this will create the file `ess-s+6-namedb.el'; if it isn't in the
     ESS directory, move it there).

     Then, completions will be autoloaded and will not be regenerated
     for every session.

     For R, do the same, using
          M-x R
     and then `M-x ess-create-object-name-db' creating
     `ess-r-namedb.el'; if it isn't in the ESS directory, move it
     there).

  8. (OPTIONAL) READ THIS ITEM THOROUGHLY BEFORE STARTING:

     In the ESSDIR/ess-5.1.22 directory, edit the file `Makeconf' if you
     want to place the compiled files in other locations; see LISPDIR
     and INFODIR.

     Then type:
          make all

     If this works, then you might try:
          make install

     This will install the info files (and the lisp files, if they are
     to go in another directory).  Don't forget to edit the file `dir'
     in the info directory specified by `INFODIR' in `doc/Makefile'.
     See the sample `dir' file for an example of the line to add.

     If you are using XEmacs, you might do:
          make EMACS=xemacs all

     and then
          make EMACS=xemacs install
     instead of editing the Makefile.

     _Note_ that you might need to use GNU make for everything to work
     properly

     An alternative, if you are running XEmacs and have access to the
     XEmacs system directories, would be to place the directory in the
     site-lisp directory, and simply type `make all' (and copy the
     documentation as appropriate).

     For GNU Emacs, you would still have to move the files into the top
     level site-lisp directory.



File: ess.info,  Node: Microsoft Windows installation,  Next: Requirements,  Prev: Unix installation,  Up: Installation

Microsoft Windows installation
==============================

   For Microsoft Windows installation, please follow the next steps:
(see separate instructions above for UNIX *Note Unix installation::.

  1. cd to a directory where you keep emacs lisp files, or create a new
     directory (for example, `c:\emacs\') to hold the distribution.
     This directory will be referred to below as "the ESS distribution
     directory".  It will contain, at the end, either the tar file
     `ess-5.1.22.tar.gz' or the zip file `ess-5.1.22.zip', and a
     directory for the ESS source, which will be termed "the ESS-5.1.22
     source directory".

  2. Retrieve the compressed tar file `ess-5.1.22.tar.gz' or the zipped
     file `ess-5.1.22.zip' from one of the FTP or WWW archive sites via
     FTP (or HTTP).  Be aware that http browsers on Windows frequently
     change the "." and "-" characters in filenames to other
     punctuation.  Please change the names back to their original form.

  3. Copy `ess-5.1.22.tar.gz' to the location where you want the
     ess-5.1.22 directory, for example to `c:\emacs\ess-5.1.22.tar.gz',
     and cd there.  For example,

          cd c:\emacs

     Extract the files from the distribution, which will unpack into a
     subdirectory, `ess-5.1.22'.
          gunzip ess-5.1.22.tar.gz
          tar xvf ess-5.1.22.tar
          (or: `gunzip < ess-5.1.22.tar.gz | tar xvf -' ).
          (or: from the zip file: `unzip ess-5.1.22.zip')

     The `tar' command will extract files into the current directory.

     Do not create `ess-5.1.22' yourself, or you will get an extra level
     of depth to your directory structure.

  4. Windows users will usually be able to use the `lisp/ess-site.el'
     as distributed.  Only rarely will changes be needed.

  5. Windows users will need to make sure that the directories for the
     software they will be using is in the PATH environment variable.
     On Windows 9x, add lines similar to the following to your
     `c:\autoexec.bat' file:
          path=%PATH%;c:\progra~1\spls2000\cmd
     On Windows NT/2000, add the directories to the PATH using the
     MyComputer menu.  Note that the directory containing the program is
     added to the PATH, not the program itself.  One such line is needed
     for each software program.  Be sure to use the abbreviation
     `progra~1' and not the long version with embedded blanks.  Use
     backslashes "\".

  6. Add the line
          (load "/PATH/ess-site")
     to your .emacs (or _emacs) file (or default.el or site-init.el, for
     a site-wide installation).  Replace `/PATH' above with the value
     of ess-lisp-directory as defined in `ess-site.el'.  Use
     forwardslashes `/'.  (GNU Emacs uses the filename `%HOME%/.emacs'
     and XEmacs uses the filename `%HOME%/.xemacs/init.el' for the
     initialization file.)

  7. To edit statistical programs, load the files with the requisite
     extensions  (".sas" for SAS, ".S" or "s" or "q" or "Q" for S-PLUS,
     ".r" or ".R" for R, and ".lsp"   for XLispStat).

  8. To run statistical processes under emacs:

     Run S-PLUS 6.x or 2000 with:
          M-x S+6
          (or `M-x S').
     You will then be asked for a pathname ("S starting data
     directory?"), from which to start the process.  The prompt will
     propose your current directory as the default.  Similarly for
     S-PLUS 6.x.  Send lines or regions from the emacs buffer
     containing your S program (for example, `myfile.s') to the S-Plus
     Commands Window with the `C-c C-n' or `C-c C-r' keys.

     Run S-PLUS 6.x or 2000 inside an emacs buffer
          M-x Sqpe+6
     You will then be asked for a pathname ("S starting data
     directory?"), from which to start the process.  The prompt will
     propose your current directory as the default.  Similarly for
     S-PLUS 6.x.  Send lines or regions from the emacs buffer
     containing your S program (for example, `myfile.s') to the *S+6*
     buffer with the `C-c C-n' or `C-c C-r' keys.  You do not have
     access to interactive graphics in this mode.  You get Unix-like
     behavior, in particular the entire transcript is available for
     emacs-style search commands.

     If you wish to run R, you can start it with:
          M-x R

     XLispStat can not currently be run with
          M-x XLS
     Hopefully, this will change.  However, you can still edit with
     emacs, and cut and paste the results into the XLispStat *Listener*
     Window under Microsoft Windows.

     SAS for Windows uses the batch access with function keys that is
     described in `doc/README.SAS'.  The user can also edit SAS files
     in an `ESS[SAS]' buffer and than manually copy and paste them into
     an Editor window in the SAS Display Manager.

     For Windows, inferior SAS in an `iESS[SAS]' buffer does not work
     on the local machine.  It does work over a network connection to
     SAS running on a remote Unix computer.

     Reason:  we use ddeclient to interface with programs and SAS
     doesn't provide the corresponding ddeserver capability.

  9. (OPTIONAL) If you are running Sqpe or R, you might consider
     installing the database files.  From within emacs, `C-x d' to the
     directory containing ESS.  Now:
          M-x Sqpe+6
     (get running.  once you have reached the SPLUS prompt, do:)
          M-x ess-create-object-name-db
     (this will create the file `ess-s+6-namedb.el'; if it isn't in the
     ESS directory, move it there).

     Then, completions will be autoloaded and will not be regenerated
     for every session.

     For R, do the same, using
          M-x R
     and then `M-x ess-create-object-name-db' creating
     `ess-r-namedb.el'; if it isn't in the ESS directory, move it
     there).

 10. That's it!



File: ess.info,  Node: Requirements,  Prev: Microsoft Windows installation,  Up: Installation

Requirements
============

   ESS version 5.1.n (n >= 2) works best with either GNU Emacs version
20.3 or higher, or XEmacs version 20.0 or higher.  It has been most
thoroughly tested with:

   * S-PLUS versions 3.3, 3.4, 4.5, 5.0, 5.1, 6

   * R versions >=0.49

   * S4

   * SAS 6.x, 7.x, 8.x

   * BUGS 0.5, 0.603

   * Stata >=6.0

   * XLispStat versions >=3.50

   on the following platforms

   * Solaris/SunOS (all)

   * SGI (all)

   * Linux (S4, S-PLUS 5.x, R, XLispStat, Stata 6.0)

   * Microsoft Windows 95/98/NT/2000 (SPLUS 4.5 and 2000)

   * Apple Mac OS (SAS for OS 9 and X11 R for OS X)

   with the following versions of emacs

   * GNU Emacs 20.3, 20.4, 20.5, 20.6, 20.7, 21.1

   * XEmacs 20.0, 20.4, 21.0, 21.1.13, 21.1.14, 21.4

   * XEmacs 19.14, 19.16 and GNU Emacs 19.28, 19.29, 19.34(1)

   ---------- Footnotes ----------

   (1) Note  that you must have `custom' support.  It is available at
The Custom Library (http://www.dina.kvl.dk/~abraham/custom/).   These
releases of emacs are no longer supported, so an upgrade is
recommended if you plan to use ESS.  If you have GNU Emacs 19.29,  see
*Note Unix installation::.


File: ess.info,  Node: System dependent,  Prev: Installation,  Up: Installation

Other variables you may need to change
======================================

   If you run the S program (from the shell) with a command other than
`Splus' you will need to set the variable `inferior-ess-program' to the
name of the appropriate program by including a line such as
     (setq inferior-ess-program "S+")

in your `.emacs' file

(substituting `S+' for the name of your S program.)

   If you need to call this program with any arguments, the variable you
need to set is dependent on the value of `inferior-ess-program'; for
example if it is `"Splus"', set the variable `inferior-Splus-args' to a
string of arguments to the `Splus' program.  If `inferior-ess-program'
has some other value, substitute the `Splus' part of
`inferior-Splus-args' with the appropriate program name.  There aren't
many instances where you need to call S with arguments, however: in
particular do not call the S program with the `-e' command-line editor
argument since ESS provides this feature for you.

   If you are running Splus (the enhanced version of S from Statsci) you
may also need to set the variable `S-plus' to `t'.  If your value of
`inferior-ess-program' is `"S+"' or `Splus' this will not be necessary,
however; `S-plus' defaults to `t' in this case.

   Finally, if you use a non-standard prompt within S, you will need to
set the variable `inferior-ess-prompt' to a regular expression which
will match both the primary prompt (`"> "' by default) and the
continuing prompt (default of `"+ "'.) The default value of this
variable matches S's default prompts.  For example, if you use (`"$ "')
as your primary prompt (you have `options(prompt="$ ")' in your
`.First' function), add the following line to your `.emacs':
     (setq inferior-ess-prompt "^\\(\\+\\|[^\\$]*\\$\\) *")

You will also need to set the variable `inferior-ess-primary-prompt' to
a regular expression which matches the primary prompt only.  Do not
anchor the regexp to the beginning of the line with `^'.  Once again,
the default value matches S's default prompt; in the example above the
appropriate value would be `"[^\\$]*\\$ *"'.

   Once these variables are set appropriately, ESS should work on any
system.


File: ess.info,  Node: Customization,  Next: Key Index,  Prev: Installation,  Up: Top

Customizing ESS
***************

   ESS can be easily customized to your taste simply by including the
appropriate lines in your `.emacs' file.  There are numerous variables
which affect the behavior of ESS in certain situations which can be
modified to your liking.  Keybindings may be set or changed to your
preferences, and for per-buffer customizations hooks are also available.

* Menu:

* Variables::                   Variables for customization
* Hooks::                       Customizing ESS with hooks
* Keybindings::                 Changing the default ESS keybindings

